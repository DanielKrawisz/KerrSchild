#include "Black Hole.h"
#include "Coordinate Transformations.h"
#include "Extra Math.h"
#include <cstddef>

using namespace std;

//This program only allows for a single black hole in the universe, so it is called
//  the primordial hole. 
BlackHole *PrimordialHole;

//The black hole constructor
BlackHole::BlackHole(double bh_M, double bh_a){
    M = bh_M;
    a = bh_a;

    if(a*a>M*M){ // This indicates a nonphysical black hole that is rotating so fast that it has no horizon.
        horizon = false;
        irad = 0;
        orad = 0;
    } else { // A physically possible black hole. 
        horizon = true;
        orad = M + sqrt(M*M - a*a);
        irad = M - sqrt(M*M - a*a);
    }
    PrimordialHole = this;
}

BlackHole::~BlackHole(){
    PrimordialHole = NULL;
}

//Gives the value of the past Eddington Finkelstein metric at a given point. 
//Parameters: 
//      x - input: coordinate of the point at which the metric value is to be determined. 
//          Must be an array of length 4.
//      g - output: An array of length 16 which is to be set with the value of the metric.
void BlackHole::MetricPastEddingtonFinkelstein(double x[], double g[]){
	//Optimized code generated in Mathematica. 
	static double q_4, q_6, q_7, q_10, q_11, q_15, q_16, q_26, q_35, q_37, q_38, q_39, q_56;

	q_4 = a*a;
	q_6 = sin(x[2]);
	q_7 = cos(x[2]);
	q_10 = x[1]*x[1];
	q_11 = M*x[1];
	q_15 = q_10 + q_4;
	q_16 = q_6*q_6;
	q_26 = a*q_16;
	q_35 = q_4*q_7*q_7;
	q_37 = q_10 + q_35;
	q_38 = q_15 + q_35;
	q_39 = 1/q_37;
	q_56 = -2*a*M*q_16*q_39*x[1];
	g[0] = -1 + 2*q_11*q_39;
	g[1] = -1;
	g[2] = 0;
	g[3] = q_56;
	g[4] = -1;
	g[5] = 0;
	g[6] = 0;
	g[7] = q_26;
	g[8] = 0;
	g[9] = 0;
	g[10] = q_37;
	g[11] = 0;
	g[12] = q_56;
	g[13] = q_26;
	g[14] = 0;
	g[15] = q_16*q_39*(q_38*q_38 - q_16*q_4*(q_15 - 2*q_11));
}

//TODO: 
//Gives the value of the future Eddington Finkelstein metric at a given point. 
//Parameters: 
//      x - input: coordinate of the point at which the metric value is to be determined. 
//          Must be an array of length 4.
//      g - output: An array of length 16 which is to be set with the value of the metric.
void BlackHole::MetricFutureEddingtonFinkelstein(double x[], double g[]){}

//Gives the value of the cartesian metric at a given point. 
//Parameters: 
//      x - input: coordinate of the point at which the metric value is to be determined. 
//          Must be an array of length 4.
//      g - output: An array of length 16 which is to be set with the value of the metric.
void BlackHole::MetricCartesian(double x[], double g[]){
	//Optimized code generated in Mathematica. 
	static double q_1, q_2, q_4, q_7, q_12, q_16, q_17, q_18, q_23, q_60, q_74, q_75, q_87, q_95, q_99, q_112, q_119, q_120, q_121, q_126, q_132, q_134, q_222, q_226, q_228, q_230, q_232, q_242, q_261, q_276;

	q_1 = sqrt(2.);
	q_2 = a*M;
	q_4 = a*a;
	q_7 = M*x[3];
	q_12 = 1/q_1;
	q_16 = x[3]*x[3];
	q_17 = x[2]*x[2];
	q_18 = x[1]*x[1];
	q_23 = q_2*x[1];
	q_60 = -q_16 - q_17 - q_18 + q_4;
	q_74 = q_16 + q_17 + q_18 - q_4 + sqrt(q_60*q_60 + 4*a*a*q_16);
	q_75 = sqrt(q_74);
	q_87 = q_7*q_74;
	q_95 = M*q_1*q_74;
	q_99 = q_4 + q_74/2.;
	q_112 = q_12*q_74*q_75;
	q_119 = a*x[2] + q_12*q_75*(x[1] + x[2]);
	q_120 = 1/q_99;
	q_121 = 1/(q_16*q_4 + (q_74*q_74)/4.);
	q_126 = 1/(q_99*q_99);
	q_132 = q_119*q_121;
	q_134 = q_120*q_121;
	q_222 = q_1*q_121*q_75;
	q_226 = q_121*q_87;
	q_228 = q_120*q_132*q_87;
	q_230 = M*q_12*q_120*q_132*q_74*q_75;
	q_232 = -(q_134*q_2*q_74*x[1]*x[3]);
	q_242 = -(q_112*q_134*q_23);
	q_261 = q_126*q_132;
	q_276 = -(q_112*q_23*q_261);
	g[0] = (-2 + q_121*q_75*q_95)/2.;
	g[1] = q_230;
	g[2] = q_242;
	g[3] = q_226;
	g[4] = q_230;
	g[5] = (2 + q_119*q_261*q_75*q_95)/2.;
	g[6] = q_276;
	g[7] = q_228;
	g[8] = q_242;
	g[9] = q_276;
	g[10] = (2 + a*q_126*q_18*q_2*q_222*q_74)/2.;
	g[11] = q_232;
	g[12] = q_226;
	g[13] = q_228;
	g[14] = q_232;
	g[15] = (2 + 2*q_222*q_7*x[3])/2.;
}

//Gives the acceleration of object at a given coordianate point in the past Eddington Finkelstein metric. 
//Parameters: 
//      x  - input: coordinate of the point at which the dx value is to be determined. 
//           Must be an array of length 4.
//      dx - output: An array of length 4 which is to be set with the value of the acceleration.
void BlackHole::AccelerationPastEddingtonFinkelstein(double x[], double dx[]){
	//Optimized code generated in Mathematica. 
	static double q_1, q_2, q_3, q_4, q_6, q_9, q_10, q_11, q_14, q_16, q_17, q_19, q_20, q_21, q_22, q_23, q_24, q_25, q_26, q_29, q_31, q_33, q_35, q_36, q_38, q_40, q_41, q_42, q_44, q_45, q_46, q_47, q_48, q_57, q_58, q_63, q_67, q_71, q_76, q_78, q_79, q_80, q_81, q_82, q_85, q_87, q_88, q_89, q_91, q_114, q_115, q_122, q_125, q_127, q_131, q_132, q_137, q_139, q_141, q_142, q_150, q_151, q_153, q_155, q_158, q_159, q_160, q_161, q_162, q_163, q_164, q_165, q_170, q_191, q_199, q_201, q_202, q_203, q_208, q_222, q_252, q_260, q_263, q_281, q_287, q_289, q_306, q_310, q_311, q_312, q_314, q_323, q_324, q_325, q_327, q_329, q_330, q_331, q_337, q_338, q_340, q_342, q_345, q_351, q_355, q_362, q_363, q_377, q_379, q_387, q_397, q_400, q_404, q_412, q_413, q_414, q_415, q_425, q_427, q_428, q_429, q_430, q_446;

	q_1 = -32*a;
	q_2 = 8*a;
	q_3 = -8*a;
	q_4 = -128*M;
	q_6 = 8*M;
	q_9 = M*M;
	q_10 = -4*a;
	q_11 = 16*a;
	q_14 = -4*M;
	q_16 = -16*M;
	q_17 = 32*M;
	q_19 = -64*a;
	q_20 = -2*a;
	q_21 = 4*M;
	q_22 = 4*a;
	q_23 = a*M;
	q_24 = 2*M;
	q_25 = 2*a;
	q_26 = a*a;
	q_29 = a*q_2;
	q_31 = 64*a*a;
	q_33 = 24*M*M;
	q_35 = a*q_11;
	q_36 = a*q_25;
	q_38 = a*q_20;
	q_40 = a*q_22;
	q_41 = a*q_23;
	q_42 = a*q_26;
	q_44 = cot(x[2]);
	q_45 = csc(x[2]);
	q_46 = sin(x[2]);
	q_47 = cos(x[2]);
	q_48 = x[1]*x[6];
	q_57 = x[6]*x[7];
	q_58 = 4*x[2];
	q_63 = 4*x[7];
	q_67 = a*x[6];
	q_71 = 3*x[2];
	q_76 = x[1]*x[7];
	q_78 = x[4]*x[7];
	q_79 = M*x[7];
	q_80 = a*x[7];
	q_81 = 2*x[7];
	q_82 = a*x[4];
	q_85 = 2*x[2];
	q_87 = x[7]*x[7];
	q_88 = x[6]*x[6];
	q_89 = x[4]*x[4];
	q_91 = x[1]*x[1];
	q_114 = M*q_57;
	q_115 = a*q_57;
	q_122 = q_63*x[1];
	q_125 = q_14*x[7];
	q_127 = q_25*x[6];
	q_131 = -2*x[1]*x[1];
	q_132 = q_21*x[1];
	q_137 = q_79*x[7];
	q_139 = q_80*x[7];
	q_141 = q_23*x[1];
	q_142 = q_26*x[7];
	q_150 = a*x[1]*x[1];
	q_151 = q_26*x[1];
	q_153 = q_91*x[1];
	q_155 = q_21*q_88;
	q_158 = q_131*q_91*q_91;
	q_159 = sin(q_58);
	q_160 = cos(6*x[2]);
	q_161 = cos(q_58);
	q_162 = cos(q_71);
	q_163 = sin(q_71);
	q_164 = cos(q_85);
	q_165 = sin(q_85);
	q_170 = q_44*q_47;
	q_191 = q_46*q_47;
	q_199 = q_47*x[6];
	q_201 = q_46*x[7];
	q_202 = q_46*q_46;
	q_203 = q_47*q_47;
	q_208 = q_44*q_48;
	q_222 = q_47*x[5]*x[6];
	q_252 = q_47*q_91;
	q_260 = M*q_47*x[6];
	q_263 = q_203*q_47;
	q_281 = q_46*q_91;
	q_287 = q_202*q_46;
	q_289 = q_46*q_79;
	q_306 = q_201*q_46;
	q_310 = q_203*q_88;
	q_311 = q_202*q_87;
	q_312 = q_203*q_26;
	q_314 = q_125*q_202;
	q_323 = 3*q_161;
	q_324 = 11*q_164;
	q_325 = 13*q_164;
	q_327 = 7*q_164;
	q_329 = 8*q_164;
	q_330 = 3 + q_164;
	q_331 = q_162 + 7*q_47;
	q_337 = 2 + q_164;
	q_338 = 7 + q_164;
	q_340 = 3*q_164;
	q_342 = q_165*q_165;
	q_345 = q_312 + q_91;
	q_351 = q_161*q_26;
	q_355 = q_165*q_91;
	q_362 = q_342*q_87;
	q_363 = q_26*q_26*q_342*q_91;
	q_377 = 3 + 2*q_164;
	q_379 = q_345*x[5];
	q_387 = q_345*q_345;
	q_397 = q_203*q_330;
	q_400 = q_26*q_330;
	q_404 = q_191*q_338;
	q_412 = (q_311 + q_88)*q_91;
	q_413 = q_153*q_412;
	q_414 = q_26*q_312*q_338;
	q_415 = q_312*q_414;
	q_425 = 1/(q_345*q_387);
	q_427 = M*(-q_312 + q_91);
	q_428 = 1/q_387;
	q_429 = q_80*(3*q_163 + 7*q_46);
	q_430 = (4 + q_340)*q_91;
	q_446 = 1/(q_414 + q_132*q_202*q_26 + q_26*(5 + q_340)*q_91 + 2*q_91*x[1]*x[1]);
	dx[0] = q_428*(-q_413 + q_427*q_89 + q_151*q_312*(-q_310 + q_201*q_287*q_81) - (q_151*q_91*(q_362 + 4*q_310))/2. + 2*q_202*q_23*q_78*(q_312 - q_91) - q_191*q_191*q_26*q_311*q_41 + q_202*q_202*q_41*q_76*q_76);
	dx[1] = (q_425*q_446*(M*q_379*(64*x[4]*(q_158 - q_363 + q_415 + q_337*q_38*q_91*q_91) + q_19*q_306*(q_363 + q_415 + q_38*q_430*q_91 - 6*q_91*q_91*q_91)) + q_17*q_82*(q_150*q_281*q_91*(q_429 + q_16*q_199) + q_153*q_355*q_36*(q_127*q_377 - 3*q_165*q_79) + 8*q_153*q_281*q_91*(-q_289 + q_47*q_67) + q_151*q_191*q_252*q_40*(q_125*q_287 + q_127*q_331) - q_191*q_252*q_312*q_42*(q_429 + 16*q_260) + q_142*q_191*q_312*q_312*q_38*q_404 + q_151*q_191*q_26*q_263*q_36*(q_67*(q_162 + 15*q_47) + q_24*x[7]*(q_163 + 5*q_46)) + q_191*q_22*q_252*q_26*q_91*(-8*q_260 + 3*q_46*q_80) + q_202*q_63*q_91*q_91*q_91*q_91) + q_16*q_89*(q_131 + q_203*q_36)*(q_158 - q_415 + q_132*q_312*q_400 + q_132*q_91*q_91 + q_10*q_397*q_42*q_91 + q_11*q_141*q_203*q_91 + q_377*q_38*q_91*q_91) + q_31*q_413*q_430*q_91 + 64*q_413*q_91*q_91*q_91 + q_151*q_26*q_26*q_26*(-(q_342*q_362*(q_33 + q_351 + 15*q_26 + q_329*(q_36 + q_9))) + 32*q_203*q_203*q_310*q_312*q_338 - 256*(4 + q_164)*q_191*q_191*q_191*q_203*q_23*q_57) + q_151*q_26*q_26*q_91*(q_362*(q_33 + 22*q_26 + q_161*(42*q_26 + M*q_6) + q_164*(-32*q_9 + 59*q_26) + 5*q_160*q_26) + q_115*q_16*q_165*(19 + q_327)*q_342 + q_203*q_203*q_31*q_310*(13 + q_340)) + q_151*q_36*q_91*q_91*(q_362*(q_33 + 17*q_351 + 55*q_26 + q_329*(-3*q_9 + 11*q_26)) + q_115*q_287*q_4*(2*q_162 + 9*q_47) + q_203*q_310*(37 + q_325)*q_35) + q_153*q_35*q_91*q_91*(q_311*(4*q_9 + 7*q_351 + 29*q_26 + 4*q_164*(-q_9 + 9*q_26)) + q_310*(25 + q_325)*q_36 - 48*q_191*q_202*q_23*q_57) + q_23*q_26*q_26*q_36*q_91*(q_139*(29 + q_324)*q_342*q_342 + q_19*q_203*q_310*q_397 + 256*q_114*q_191*q_191*q_191*q_203) + q_23*q_29*q_312*q_91*q_91*(q_139*(-13 + q_161 + 6*q_160 + 6*q_164) + q_19*q_310*q_337 + 128*q_114*q_191*q_202) + q_3*q_41*q_91*q_91*q_91*(q_139*q_202*(79 + 21*q_161 + 92*q_164) + q_2*q_310*(15 + q_324) - 64*q_114*q_191*q_202) + q_4*q_412*q_91*q_91*q_91*q_91 + q_1*q_23*q_91*q_91*q_91*q_91*(24*q_310 + q_311*(13 + q_324)) + q_17*q_191*q_191*q_191*q_26*q_26*q_26*q_26*q_312*q_404*q_87))/32.;
	dx[2] = (q_425*(q_1*q_153*q_47*(a*q_222 + q_289*(x[4] - q_202*q_80)) + q_122*q_355*q_76*q_91 + q_26*q_26*q_355*(8*q_310 + q_87*(9 + q_323 + 20*q_164)) + q_29*q_47*x[1]*(q_26*(-2*q_203*q_222 + q_137*q_287*q_330) + q_24*q_46*q_89 + M*q_10*q_46*q_78) + q_355*q_40*q_91*(q_88 + (2 + q_340)*q_87) - 16*q_48*q_91*q_91*x[5] + q_191*q_29*q_312*q_312*(q_88 + q_330*q_87)))/8.;
	dx[3] = (q_428*q_446*(-2*(q_141*q_36*(-(q_82*(q_342*q_79 + q_170*q_199*q_22)) + q_203*q_24*q_89 + (q_142*q_203*(q_67*(q_159 + 6*q_165) + q_201*q_21*q_287))/2.) + q_141*q_91*(q_14*q_89 + q_142*(q_202*q_314 + q_67*(3*q_159 + 10*q_165)) + q_20*x[4]*(q_314 + q_331*q_45*q_67)) + q_150*q_91*q_91*(q_155 + q_21*q_311 + q_115*q_45*(7*q_162 + 17*q_47)) + q_122*q_208*q_91*q_91*q_91 + q_22*q_26*q_312*q_91*(q_199*q_260 + q_115*(4 + q_161 + q_327)*q_44 - 2*q_137*q_202*q_202) + q_42*q_44*q_91*q_91*(q_155*q_165 + q_191*q_311*q_6 + q_25*q_57*(8 + q_323 + 15*q_164)) + M*q_208*q_3*q_91*q_91*(x[4] + q_20*q_306) + q_170*q_26*q_263*q_312*q_40*q_400*q_57) - q_379*(q_81*(4*q_153*q_91 + q_151*q_342*q_38 + q_153*q_203*q_29 + q_26*q_342*q_41 + q_10*q_202*q_23*q_91) + q_2*q_427*x[4])))/2.;
}

//TODO
//Gives the acceleration of object at a given coordianate point in the future Eddington Finkelstein metric. 
//Parameters: 
//      x  - input: coordinate of the point at which the dx value is to be determined. 
//           Must be an array of length 4.
//      dx - output: An array of length 4 which is to be set with the value of the acceleration.
void BlackHole::AccelerationFutureEddingtonFinkelstein(double x[], double dx[]){}

//Gives the acceleration of object at a given coordianate point in the Cartesian metric. 
//Parameters: 
//      x  - input: coordinate of the point at which the dx value is to be determined. 
//           Must be an array of length 4.
//      dx - output: An array of length 4 which is to be set with the value of the acceleration.
void BlackHole::AccelerationCartesian(double x[], double dx[]){
	//Optimized code generated in Mathematica. 
	static double q_1, q_6, q_8, q_9, q_11, q_12, q_17, q_18, q_20, q_21, q_23, q_25, q_26, q_27, q_28, q_29, q_30, q_33, q_34, q_35, q_36, q_37, q_38, q_39, q_40, q_41, q_42, q_43, q_44, q_45, q_46, q_47, q_48, q_50, q_51, q_53, q_55, q_56, q_57, q_58, q_59, q_60, q_61, q_62, q_63, q_64, q_65, q_66, q_67, q_68, q_69, q_70, q_71, q_72, q_73, q_74, q_75, q_76, q_77, q_78, q_79, q_80, q_81, q_82, q_83, q_84, q_85, q_94, q_95, q_99, q_103, q_104, q_106, q_107, q_108, q_109, q_110, q_113, q_114, q_115, q_116, q_117, q_118, q_119, q_120, q_121, q_124, q_125, q_126, q_128, q_129, q_130, q_131, q_132, q_134, q_135, q_137, q_138, q_139, q_141, q_142, q_143, q_144, q_145, q_146, q_147, q_148, q_149, q_150, q_151, q_152, q_153, q_154, q_155, q_156, q_184, q_188, q_189, q_194, q_211, q_212, q_213, q_219, q_221, q_222, q_224, q_226, q_227, q_233, q_234, q_240, q_241, q_243, q_247, q_249, q_250, q_252, q_253, q_254, q_255, q_257, q_258, q_260, q_264, q_269, q_274, q_275, q_278, q_279, q_280, q_282, q_287, q_289, q_290, q_291, q_292, q_294, q_295, q_296, q_298, q_299, q_300, q_301, q_302, q_303, q_304, q_305, q_306, q_307, q_308, q_309, q_310, q_312, q_313, q_314, q_315, q_318, q_319, q_320, q_321, q_322, q_323, q_324, q_325, q_326, q_327, q_328, q_329, q_330, q_331, q_332, q_333, q_334, q_335, q_336, q_337, q_338, q_339, q_340, q_343, q_344, q_345, q_346, q_348, q_349, q_351, q_353, q_354, q_355, q_356, q_357, q_358, q_360, q_361, q_363, q_364, q_365, q_366, q_367, q_368, q_369, q_371, q_372, q_373, q_374, q_375, q_376, q_377, q_378, q_379, q_380, q_381, q_382, q_383, q_384, q_385, q_386, q_387, q_415, q_416, q_430, q_433, q_443, q_447, q_448, q_455, q_457, q_466, q_469, q_474, q_487, q_493, q_503, q_504, q_508, q_520, q_546, q_552, q_555, q_566, q_569, q_582, q_584, q_586, q_597, q_601, q_602, q_603, q_607, q_611, q_616, q_629, q_637, q_649, q_650, q_652, q_654, q_656, q_657, q_658, q_660, q_661, q_662, q_664, q_666, q_669, q_674, q_676, q_677, q_680, q_682, q_684, q_686, q_687, q_692, q_693, q_697, q_701, q_706, q_714, q_722, q_728, q_729, q_736, q_738, q_741, q_742, q_747, q_750, q_752, q_755, q_762, q_771, q_775, q_777, q_778, q_779, q_783, q_784, q_794, q_795, q_796, q_803, q_806, q_813, q_814, q_818, q_821, q_827, q_832, q_837, q_840, q_847, q_849, q_850, q_851, q_852, q_854, q_864, q_867, q_868, q_870, q_872, q_878, q_882, q_886, q_894, q_896, q_904, q_911, q_923, q_926, q_933, q_934, q_936, q_940, q_946, q_953, q_957, q_958, q_965, q_967, q_971, q_973, q_975, q_976, q_977, q_980, q_983, q_985, q_986, q_988, q_992, q_994, q_995, q_996, q_997, q_998, q_1003, q_1004, q_1007, q_1009, q_1012, q_1013, q_1016, q_1017, q_1018, q_1021, q_1022, q_1023, q_1027, q_1029, q_1030, q_1031, q_1033, q_1034, q_1035, q_1036, q_1037, q_1041, q_1042, q_1043, q_1045, q_1046, q_1047, q_1048, q_1050, q_1051, q_1052, q_1056, q_1057, q_1062, q_1066, q_1067, q_1070, q_1071, q_1072, q_1074, q_1075, q_1076, q_1077, q_1079, q_1081, q_1083, q_1089, q_1097, q_1098, q_1108, q_1126, q_1127, q_1129, q_1131, q_1132, q_1133, q_1134, q_1142, q_1143, q_1145, q_1147, q_1148, q_1151, q_1152, q_1153, q_1159, q_1161, q_1163, q_1168, q_1170, q_1172, q_1174, q_1180, q_1181, q_1185, q_1187, q_1188, q_1191, q_1193, q_1194, q_1195, q_1196, q_1198, q_1200, q_1202, q_1204, q_1205, q_1206, q_1207, q_1208, q_1209, q_1210, q_1211, q_1212, q_1213, q_1214, q_1215, q_1216, q_1218, q_1219, q_1220, q_1221, q_1222, q_1223, q_1224, q_1225, q_1233, q_1234, q_1237, q_1238, q_1248, q_1249, q_1251, q_1263, q_1266, q_1268, q_1280, q_1282, q_1286, q_1287, q_1289, q_1294, q_1295, q_1297, q_1302, q_1311, q_1315, q_1318, q_1320, q_1321, q_1322, q_1323, q_1324, q_1327, q_1328, q_1330, q_1332, q_1333, q_1335, q_1346, q_1347, q_1348, q_1350, q_1351, q_1361, q_1362, q_1363, q_1366, q_1370, q_1372, q_1374, q_1375, q_1377, q_1381, q_1385, q_1386, q_1387, q_1389, q_1391, q_1396, q_1397, q_1398, q_1400, q_1403, q_1404, q_1406, q_1408, q_1409, q_1411, q_1412, q_1414, q_1415, q_1417, q_1418, q_1419, q_1420, q_1421, q_1422, q_1423, q_1425, q_1427, q_1428, q_1429, q_1432, q_1433, q_1435, q_1436, q_1437, q_1438, q_1439, q_1441, q_1443, q_1444, q_1446, q_1447, q_1448, q_1459, q_1463, q_1473, q_1476, q_1490, q_1513, q_1533, q_1569, q_1587, q_1596, q_1600, q_1601, q_1608, q_1613, q_1744, q_1747, q_1748, q_1749, q_1764, q_1771, q_1789, q_1827, q_1830, q_1836, q_1852, q_1859, q_1864, q_1869, q_1882, q_1894, q_1895, q_1918, q_1919, q_1924, q_1929, q_1937, q_1939, q_1941, q_1942, q_1947, q_1948, q_1949, q_1991, q_2024, q_2025, q_2038, q_2040, q_2063, q_2068, q_2071, q_2074, q_2078, q_2081, q_2083, q_2086, q_2088, q_2089, q_2108, q_2117, q_2119, q_2122,
        q_2123, q_2129, q_2131, q_2135, q_2136, q_2138, q_2139, q_2142, q_2143, q_2166, q_2174, q_2194, q_2195, q_2196, q_2197, q_2210, q_2211, q_2213, q_2216, q_2217, q_2218, q_2254, q_2264, q_2308, q_2315, q_2358, q_2369, q_2372, q_2377, q_2380, q_2381, q_2393, q_2402, q_2403, q_2415, q_2416, q_2420, q_2421, q_2422, q_2423, q_2426, q_2428, q_2432, q_2433, q_2440, q_2492, q_2518, q_2534, q_2538, q_2545, q_2602, q_2604, q_2611, q_2616, q_2630, q_2637, q_2639, q_2643, q_2659, q_2667, q_2670, q_2675, q_2679, q_2686, q_2697, q_2719, q_2751, q_2757, q_2784, q_2786, q_2805, q_2808, q_2810, q_2814, q_2816, q_2819, q_2849, q_3097, q_3129, q_3130, q_3262, q_3389, q_3432, q_3470, q_3540, q_3546, q_3567, q_3578, q_3582, q_3590, q_3638, q_3652, q_4020, q_4134, q_4145, q_4211, q_4263, q_4289, q_4357, q_4368, q_4383, q_4399, q_4402, q_4418, q_4440, q_4453, q_4467, q_4471, q_4472, q_4475, q_4552, q_4554, q_4555, q_4556, q_4557, q_4558, q_4559, q_4560, q_4561, q_4563, q_4564, q_4565, q_4566, q_4568, q_4570, q_4571, q_4572, q_4573, q_4574, q_4578, q_4579, q_4580, q_4581, q_4582, q_4585, q_4586, q_4587, q_4588, q_4589, q_4590, q_4591, q_4592, q_4594, q_4596, q_4597, q_4598, q_4599, q_4601, q_4602, q_4604, q_4605, q_4607, q_4608, q_4609, q_4610, q_4611, q_4612, q_4613, q_4618, q_4622, q_4628, q_4629, q_4630, q_4648, q_4651, q_4652, q_4653, q_4659, q_4662, q_4663, q_4666, q_4667, q_4668, q_4670, q_4673, q_4674, q_4675, q_4676, q_4680, q_4682, q_4684, q_4685, q_4688, q_4693, q_4694, q_4697, q_4699, q_4700, q_4702, q_4703, q_4706, q_4708, q_4710, q_4711, q_4713, q_4716, q_4717, q_4720, q_4721, q_4722, q_4724, q_4726, q_4727, q_4728, q_4729, q_4735, q_4736, q_4737, q_4739, q_4740, q_4742, q_4743, q_4745, q_4749, q_4750, q_4751, q_4752, q_4753, q_4754, q_4755, q_4757, q_4758, q_4760, q_4761, q_4762, q_4763, q_4764, q_4765, q_4766, q_4767, q_4768, q_4769, q_4773, q_4775, q_4776, q_4777, q_4778, q_4779, q_4780, q_4781, q_4782, q_4783, q_4784, q_4785, q_4786, q_4787, q_4788, q_4789, q_4790, q_4791, q_4792, q_4793, q_4794, q_4795, q_4797, q_4798, q_4799, q_4800, q_4801, q_4804, q_4806, q_4808, q_4809, q_4810, q_4818, q_4831, q_4836, q_4837, q_4839, q_4841, q_4849, q_4853, q_4854, q_4855, q_4859, q_4861, q_4862, q_4866, q_4867, q_4872, q_4873, q_4874, q_4875, q_4878, q_4880, q_4882, q_4885, q_4887, q_4888, q_4891, q_4893, q_4899, q_4900, q_4907, q_4909, q_4916, q_4917, q_4919, q_4920, q_4923, q_4924, q_4925, q_4929, q_4930, q_4936, q_4937, q_4938, q_4940, q_4941, q_4943, q_4944, q_4946, q_4947, q_4953, q_4976, q_4981, q_4983, q_4987, q_4988, q_4993, q_4998, q_5002, q_5003, q_5008, q_5009, q_5011, q_5015, q_5016, q_5019, q_5020, q_5022, q_5031, q_5039, q_5051, q_5052, q_5057, q_5058, q_5067, q_5068, q_5069, q_5071, q_5076, q_5080, q_5081, q_5095, q_5096, q_5097, q_5103, q_5120, q_5121, q_5127, q_5133, q_5148, q_5153, q_5202, q_5229, q_5230, q_5231, q_5232, q_5233, q_5234, q_5236, q_5243, q_5247, q_5252, q_5256, q_5261, q_5263, q_5265, q_5271, q_5273, q_5281, q_5289, q_5372, q_5386, q_5390, q_5391, q_5399, q_5404, q_5407, q_5432, q_5434, q_5437, q_5439, q_5441, q_5444, q_5452, q_5472, q_5475, q_5476, q_5477, q_5480, q_5481, q_5482, q_5483, q_5484, q_5485, q_5486, q_5487, q_5488, q_5490, q_5491, q_5492, q_5493, q_5495, q_5496, q_5498, q_5504, q_5505, q_5506, q_5510, q_5511, q_5512, q_5513, q_5514, q_5515, q_5516, q_5520, q_5521, q_5522, q_5523, q_5524, q_5525, q_5530, q_5531, q_5532, q_5533, q_5535, q_5536, q_5537, q_5539, q_5540, q_5541, q_5542, q_5547, q_5548, q_5551, q_5552, q_5553, q_5555, q_5557, q_5558, q_5559, q_5560, q_5561, q_5562, q_5563, q_5564, q_5565, q_5567, q_5570, q_5651, q_5657, q_5770, q_5776, q_5810, q_5856, q_5857, q_5858, q_5859, q_5860, q_5861, q_5862, q_5863, q_5864, q_5869, q_5871, q_5872, q_5917, q_5932, q_5936, q_5939, q_5982, q_5983, q_5994, q_6008, q_6089, q_6146, q_6148, q_6149, q_6179, q_6180, q_6187, q_6214, q_6215, q_6223, q_6225, q_6235, q_6247, q_6251, q_6253, q_6255, q_6256, q_6260, q_6263, q_6266, q_6268, q_6277, q_6279, q_6291, q_6463, q_6566, q_6662, q_6739, q_6749, q_6783, q_6793, q_6801, q_6822, q_6825, q_6835, q_6836, q_6838, q_6841, q_6854, q_6855, q_6869, q_6883, q_6886, q_6939, q_7004, q_7007, q_7010, q_7046, q_7106, q_7160, q_7225, q_7226, q_7227, q_7229, q_7232, q_7233, q_7234, q_7410, q_7423, q_7523, q_7567, q_7638, q_7705, q_7760, q_7794, q_7861, q_7881, q_8000, q_8001, q_8316, q_8320, q_8723, q_8742, q_8746, q_8747, q_8756, q_8759, q_9014, q_9017, q_9753, q_9760, q_9764, q_9766, q_10118, q_10330, q_10469, q_10474, q_10516, q_10997, q_11356, q_11368, q_11374, q_11378, q_11792, q_11930, q_11931, q_12104, q_12249, q_12250, q_12251, q_12253, q_12269, q_12270;

	q_1 = sqrt(2.);
	q_6 = -8*M;
	q_8 = (11*a)/2.;
	q_9 = M/32.;
	q_11 = -a/16.;
	q_12 = -M/8.;
	q_17 = -a/32.;
	q_18 = M/8.;
	q_20 = (3*a)/4.;
	q_21 = (3*a)/32.;
	q_23 = M/4.;
	q_25 = (7*a)/2.;
	q_26 = -12*M;
	q_27 = -a/4.;
	q_28 = 9*a;
	q_29 = -12*a;
	q_30 = -16*M;
	q_33 = -5*M;
	q_34 = a/8.;
	q_35 = (5*M)/2.;
	q_36 = (5*a)/2.;
	q_37 = (-5*M)/2.;
	q_38 = -8*a;
	q_39 = 5*a;
	q_40 = (-7*a)/2.;
	q_41 = -7*a;
	q_42 = -a;
	q_43 = -M;
	q_44 = 7*a;
	q_45 = 6*M;
	q_46 = -5*a;
	q_47 = 5*M;
	q_48 = -6*M;
	q_50 = a/16.;
	q_51 = (9*M)/2.;
	q_53 = (-9*M)/2.;
	q_55 = 6*a;
	q_56 = -7*M;
	q_57 = 7*M;
	q_58 = -3*M;
	q_59 = a/32.;
	q_60 = 3*M;
	q_61 = (-3*M)/2.;
	q_62 = (-3*a)/2.;
	q_63 = 8*M;
	q_64 = (3*M)/2.;
	q_65 = (3*a)/2.;
	q_66 = a/64.;
	q_67 = -M/2.;
	q_68 = -a/2.;
	q_69 = 2*a;
	q_70 = -2*M;
	q_71 = 3*a;
	q_72 = a/2.;
	q_73 = 2*M;
	q_74 = 8*a;
	q_75 = -4*a;
	q_76 = -3*a;
	q_77 = a*M;
	q_78 = -2*a;
	q_79 = M/2.;
	q_80 = -M/4.;
	q_81 = 4*M;
	q_82 = -4*M;
	q_83 = a/4.;
	q_84 = 4*a;
	q_85 = a*a;
	q_94 = a*q_11;
	q_95 = a*q_39;
	q_99 = a*q_17;
	q_103 = a*q_26;
	q_104 = a*q_27;
	q_106 = a*q_28;
	q_107 = -(a*a)/8.;
	q_108 = a*q_34;
	q_109 = a*q_36;
	q_110 = -6*a*a;
	q_113 = a*q_44;
	q_114 = a*q_68;
	q_115 = (9*a*a)/2.;
	q_116 = a*q_58;
	q_117 = a*q_45;
	q_118 = a*q_70;
	q_119 = a*q_72;
	q_120 = a*q_48;
	q_121 = a*q_50;
	q_124 = a*q_55;
	q_125 = a*q_59;
	q_126 = a*q_60;
	q_128 = a*q_62;
	q_129 = a*q_76;
	q_130 = M*q_75;
	q_131 = a*q_63;
	q_132 = a*q_71;
	q_134 = a*q_65;
	q_135 = 4*q_77;
	q_137 = M*q_69;
	q_138 = a*q_69;
	q_139 = M*q_72;
	q_141 = a*q_75;
	q_142 = a*q_77;
	q_143 = a*q_78;
	q_144 = a*q_83;
	q_145 = a*q_85;
	q_146 = a*q_84;
	q_147 = q_55*q_85;
	q_148 = q_28*q_85;
	q_149 = q_69*q_85;
	q_150 = q_58*q_85;
	q_151 = q_77*q_84;
	q_152 = q_44*q_85;
	q_153 = q_85*q_85;
	q_154 = q_138*q_85;
	q_155 = q_124*q_85;
	q_156 = q_132*q_85;
	q_184 = -q_77;
	q_188 = (-5*x[3])/2.;
	q_189 = -x[3]/2.;
	q_194 = (-7*x[5])/2.;
	q_211 = M + q_78;
	q_212 = -5*x[2];
	q_213 = M + q_69;
	q_219 = (5*x[6])/2.;
	q_221 = (-3*x[3])/2.;
	q_222 = -3*x[3];
	q_224 = 4*x[7];
	q_226 = -6*x[6];
	q_227 = x[3]*x[5];
	q_233 = (5*x[2])/2.;
	q_234 = 3*x[3];
	q_240 = 3*q_1;
	q_241 = (5*x[5])/2.;
	q_243 = 5*x[5];
	q_247 = -x[6];
	q_249 = a + q_70;
	q_250 = x[2]*x[3];
	q_252 = (7*x[2])/2.;
	q_253 = (3*x[3])/2.;
	q_254 = -2*x[3];
	q_255 = M + q_42;
	q_257 = a + q_48;
	q_258 = -2*x[7];
	q_260 = -4*x[2];
	q_264 = -3*x[2];
	q_269 = (-3*x[7])/2.;
	q_274 = (-3*x[2])/2.;
	q_275 = -x[7]/2.;
	q_278 = (3*x[5])/2.;
	q_279 = -2*x[6];
	q_280 = (5*x[1])/2.;
	q_282 = x[4]*x[5];
	q_287 = (-3*x[1])/2.;
	q_289 = -4*x[5];
	q_290 = -3*x[7];
	q_291 = -3*x[6];
	q_292 = -3*x[1];
	q_294 = -x[5]/2.;
	q_295 = -x[2]/2.;
	q_296 = -2*x[5];
	q_298 = x[2]/2.;
	q_299 = 3*x[6];
	q_300 = 3*x[5];
	q_301 = (3*x[6])/2.;
	q_302 = a*x[2];
	q_303 = x[5]*x[7];
	q_304 = 3*x[7];
	q_305 = x[1]*x[5];
	q_306 = (3*x[1])/2.;
	q_307 = x[2]*x[5];
	q_308 = q_1*x[5];
	q_309 = M*x[5];
	q_310 = x[2]*x[7];
	q_312 = (3*x[2])/2.;
	q_313 = 3*x[2];
	q_314 = x[2]*x[6];
	q_315 = q_1*x[2];
	q_318 = x[5]*x[6];
	q_319 = 2*x[5];
	q_320 = x[6]*x[6];
	q_321 = -2*q_1;
	q_322 = 6*x[6];
	q_323 = x[6]*x[7];
	q_324 = q_1*x[6];
	q_325 = x[7]*x[7];
	q_326 = 2*q_1;
	q_327 = -x[4]/2.;
	q_328 = -x[1]/2.;
	q_329 = x[1]*x[3];
	q_330 = q_1*x[7];
	q_331 = q_1*x[4];
	q_332 = x[1]*x[7];
	q_333 = M*x[7];
	q_334 = x[4]*x[6];
	q_335 = M*x[6];
	q_336 = 2*x[6];
	q_337 = a*x[1];
	q_338 = x[4]*x[7];
	q_339 = 2*x[7];
	q_340 = x[2]*x[4];
	q_343 = x[5]*x[5];
	q_344 = a*x[5];
	q_345 = x[4]*x[4];
	q_346 = a*x[4];
	q_348 = 4*x[6];
	q_349 = x[5]/2.;
	q_351 = x[3]*x[7];
	q_353 = x[1]*x[6];
	q_354 = x[1]/2.;
	q_355 = x[3]*x[6];
	q_356 = x[6]/2.;
	q_357 = x[3]/2.;
	q_358 = x[1]*x[4];
	q_360 = 2*x[1];
	q_361 = a*x[7];
	q_363 = x[3]*x[4];
	q_364 = M*x[4];
	q_365 = a*x[6];
	q_366 = q_1*x[1];
	q_367 = 2*x[2];
	q_368 = q_1*x[3];
	q_369 = M*x[3];
	q_371 = 2*x[3];
	q_372 = -2*x[2];
	q_373 = -2*x[1];
	q_374 = 1/q_1;
	q_375 = x[1]*x[2];
	q_376 = M*x[2];
	q_377 = 4*x[2];
	q_378 = 4*x[1];
	q_379 = M*x[1];
	q_380 = -4*x[1];
	q_381 = a*x[3];
	q_382 = 4*x[3];
	q_383 = x[3]*x[3];
	q_384 = x[2]*x[2];
	q_385 = x[1]*x[1];
	q_386 = -q_85;
	q_387 = M*q_1;
	q_415 = q_80*x[2];
	q_416 = q_12*x[3];
	q_430 = q_329*x[3];
	q_433 = q_68*x[2];
	q_443 = q_72*x[2];
	q_447 = q_65*x[3];
	q_448 = q_67*x[3];
	q_455 = q_250/2.;
	q_457 = q_37*x[3];
	q_466 = q_72*x[3];
	q_469 = 6*x[3]*x[3];
	q_474 = q_83*x[3];
	q_487 = -5*x[3]*x[7];
	q_493 = q_46*x[3];
	q_503 = q_234*x[3];
	q_504 = q_76*x[3];
	q_508 = q_227*x[1];
	q_520 = q_34*x[3];
	q_546 = q_71*x[3];
	q_552 = q_35*x[2];
	q_555 = q_36*x[6];
	q_566 = q_274*x[2];
	q_569 = q_61*x[3];
	q_582 = q_222*x[3];
	q_584 = q_58*x[3];
	q_586 = q_227*x[6];
	q_597 = q_81*x[3];
	q_601 = q_227*x[7];
	q_602 = q_227*x[2];
	q_603 = M*q_227;
	q_607 = q_82*x[3];
	q_611 = q_227*x[3];
	q_616 = q_234*x[7];
	q_629 = q_343/2.;
	q_637 = q_39*x[4];
	q_649 = q_64*x[3];
	q_650 = q_340*x[4];
	q_652 = q_65*x[2];
	q_654 = q_357*x[3];
	q_656 = q_79*x[3];
	q_657 = q_250*x[3];
	q_658 = q_250*x[2];
	q_660 = q_250*x[4];
	q_661 = q_1*q_250;
	q_662 = M*q_250;
	q_664 = q_331*x[4];
	q_666 = q_250*x[6];
	q_669 = q_314*x[4];
	q_674 = q_354*x[1];
	q_676 = q_373*x[1];
	q_677 = q_76*x[4];
	q_680 = q_70*x[3];
	q_682 = q_254*x[3];
	q_684 = q_72*x[6];
	q_686 = q_61*x[2];
	q_687 = q_299*x[6];
	q_692 = q_320/2.;
	q_693 = q_298*x[6];
	q_697 = q_295*x[2];
	q_701 = q_1*q_258;
	q_706 = q_310*x[1];
	q_714 = q_302*x[2];
	q_722 = q_314*x[1];
	q_728 = q_70*x[1];
	q_729 = q_78*x[6];
	q_736 = q_78*x[2];
	q_738 = q_298*x[2];
	q_741 = q_73*x[3];
	q_742 = q_383*x[3];
	q_747 = q_300*x[2];
	q_750 = q_69*x[2];
	q_752 = q_60*x[2];
	q_755 = q_310*x[7];
	q_762 = q_325*x[1];
	q_771 = q_1*q_302;
	q_775 = 2*q_314;
	q_777 = q_73*x[2];
	q_778 = q_72*x[1];
	q_779 = q_72*x[7];
	q_783 = q_78*x[4];
	q_784 = q_332/2.;
	q_794 = q_60*x[4];
	q_795 = q_60*x[1];
	q_796 = q_71*x[4];
	q_803 = q_73*x[7];
	q_806 = q_385*x[1];
	q_813 = q_61*x[1];
	q_814 = q_62*x[4];
	q_818 = q_366*x[1];
	q_821 = q_303*x[1];
	q_827 = q_300*x[5];
	q_832 = q_305*x[1];
	q_837 = q_77*x[5];
	q_840 = q_384*x[2];
	q_847 = M*q_325;
	q_849 = q_319*x[5];
	q_850 = q_79*x[1];
	q_851 = q_67*x[2];
	q_852 = q_79*x[2];
	q_854 = q_71*x[6];
	q_864 = q_1*q_310;
	q_867 = q_314*x[2];
	q_868 = q_307*x[2];
	q_870 = q_315*x[2];
	q_872 = q_310*x[6];
	q_878 = q_303*x[2];
	q_882 = q_85*x[2];
	q_886 = q_307*x[5];
	q_894 = M*q_314;
	q_896 = M*q_315;
	q_904 = q_1*q_323;
	q_911 = 2*q_324;
	q_923 = q_67*x[1];
	q_926 = q_330*x[3];
	q_933 = M*q_331;
	q_934 = M*q_366;
	q_936 = q_355*x[3];
	q_940 = q_363*x[3];
	q_946 = q_334*x[1];
	q_953 = q_77*x[1];
	q_957 = q_73*x[1];
	q_958 = q_69*x[6];
	q_965 = q_339*x[3];
	q_967 = q_69*x[4];
	q_971 = q_376*x[2];
	q_973 = q_372*x[2];
	q_975 = q_70*x[2];
	q_976 = a*q_343;
	q_977 = q_85*x[5];
	q_980 = q_77*x[4];
	q_983 = q_72*x[4];
	q_985 = q_73*x[4];
	q_986 = q_351/2.;
	q_988 = q_355/2.;
	q_992 = q_85*x[7];
	q_994 = M*q_363;
	q_995 = q_85*x[6];
	q_996 = q_368*x[3];
	q_997 = q_369*x[3];
	q_998 = M*q_368;
	q_1003 = q_371*x[3];
	q_1004 = q_372*x[1];
	q_1007 = q_81*x[2];
	q_1009 = q_379*x[1];
	q_1012 = q_381*x[3];
	q_1013 = q_85*x[3];
	q_1016 = q_384*q_75;
	q_1017 = q_376*q_384;
	q_1018 = q_126*x[2];
	q_1021 = q_351*q_69;
	q_1022 = q_351*q_78;
	q_1023 = q_351*q_85;
	q_1027 = q_138*x[3];
	q_1029 = q_383*q_76;
	q_1030 = q_26*q_385;
	q_1031 = q_385*q_73;
	q_1033 = q_384*q_69;
	q_1034 = q_383*q_69;
	q_1035 = q_384*q_78;
	q_1036 = q_383*q_383;
	q_1037 = q_384*q_73;
	q_1041 = q_132*x[4];
	q_1042 = q_314*q_73;
	q_1043 = q_343*q_85;
	q_1045 = q_383*q_73;
	q_1046 = q_137*x[2];
	q_1047 = q_384*q_70;
	q_1048 = q_314*q_77;
	q_1050 = q_118*x[2];
	q_1051 = q_120*x[2];
	q_1052 = q_385*q_81;
	q_1056 = q_385*q_82;
	q_1057 = q_383*q_85;
	q_1062 = q_837*q_85;
	q_1066 = q_132*q_351;
	q_1067 = q_611*q_77;
	q_1070 = -15*a*a*q_383;
	q_1071 = q_129*q_383;
	q_1072 = a*q_29*q_383;
	q_1074 = q_129*q_320;
	q_1075 = q_141*q_325;
	q_1076 = q_135*q_314;
	q_1077 = q_333*q_742;
	q_1079 = q_375*q_81*x[1];
	q_1081 = q_85*q_878;
	q_1083 = q_118*q_840;
	q_1089 = q_126*q_977;
	q_1097 = q_118*q_314*q_353;
	q_1098 = q_1057*q_153;
	q_1108 = q_85 + q_360*x[2];
	q_1126 = (13*q_374)/2.;
	q_1127 = -(a*q_351);
	q_1129 = q_1036 + q_154;
	q_1131 = q_503 + q_360*x[1];
	q_1132 = -q_385;
	q_1133 = -q_1012;
	q_1134 = q_1034 + q_145;
	q_1142 = q_113 + q_582;
	q_1143 = q_85 - 5*x[3]*x[3];
	q_1145 = -q_384;
	q_1147 = q_1012 + q_714;
	q_1148 = -q_302;
	q_1151 = q_682 + q_85;
	q_1152 = q_383 + q_85;
	q_1153 = q_582 + q_85;
	q_1159 = q_106 - 10*x[3]*x[3];
	q_1161 = q_1003 + q_85;
	q_1163 = q_129 + q_383;
	q_1168 = q_374*(q_41 + q_73);
	q_1170 = -5*q_374;
	q_1172 = q_374*(q_39 + q_58);
	q_1174 = q_257*q_374;
	q_1180 = q_211*q_374;
	q_1181 = q_374*(q_43 + q_69);
	q_1185 = -q_383;
	q_1187 = (-5*q_374)/2.;
	q_1188 = q_247 + x[5];
	q_1191 = q_374*(a + q_60);
	q_1193 = q_374/16.;
	q_1194 = -q_314;
	q_1195 = (7*q_374)/2.;
	q_1196 = -q_1057;
	q_1198 = -q_346;
	q_1200 = q_314 + q_351;
	q_1202 = q_374*(a + q_43);
	q_1204 = q_374*(q_60 + q_75);
	q_1205 = q_374*(q_58 + q_84);
	q_1206 = (9*q_374)/2.;
	q_1207 = (-9*q_374)/2.;
	q_1208 = q_374*(q_58 + q_69);
	q_1209 = (5*q_374)/2.;
	q_1210 = -3*q_374;
	q_1211 = (-3*q_374)/2.;
	q_1212 = -x[1] + x[2];
	q_1213 = x[1] - x[2];
	q_1214 = 3*q_374;
	q_1215 = q_305 + q_314;
	q_1216 = q_374*x[2];
	q_1218 = (3*q_374)/2.;
	q_1219 = -q_374/2.;
	q_1220 = q_374*x[5];
	q_1221 = q_374*x[7];
	q_1222 = q_374*x[6];
	q_1223 = q_374*x[4];
	q_1224 = q_374*x[1];
	q_1225 = q_374*x[3];
	q_1233 = a*q_374;
	q_1234 = q_143 + q_383;
	q_1237 = q_374/2.;
	q_1238 = M*q_374;
	q_1248 = q_383 + q_386;
	q_1249 = q_384 + q_385;
	q_1251 = q_385 + q_386;
	q_1263 = (-11*q_374*x[5])/2.;
	q_1266 = q_374*q_8;
	q_1268 = (5*a*q_374)/16.;
	q_1280 = q_18*q_374;
	q_1282 = q_23*q_374;
	q_1286 = q_1036 + q_1072 + q_156;
	q_1287 = q_374*q_83;
	q_1289 = q_34*q_374;
	q_1294 = q_188*q_374;
	q_1295 = q_189*q_374;
	q_1297 = q_25*q_374;
	q_1302 = q_27*q_374;
	q_1311 = q_28*q_374;
	q_1315 = q_249*q_71;
	q_1318 = (9*q_374*x[3])/2.;
	q_1320 = (5*q_374*x[3])/2.;
	q_1321 = q_35*q_374;
	q_1322 = q_219*q_374;
	q_1323 = q_36*q_374;
	q_1324 = (-3*q_374*x[6])/2.;
	q_1327 = q_227*q_374;
	q_1328 = (7*q_374*x[3])/2.;
	q_1330 = q_233*q_374;
	q_1332 = (-5*q_374*x[2])/2.;
	q_1333 = q_37*q_374;
	q_1335 = q_241*q_374;
	q_1346 = q_250*q_374;
	q_1347 = q_374*q_381;
	q_1348 = q_252*q_374;
	q_1350 = q_340*q_374;
	q_1351 = q_374*q_40;
	q_1361 = q_307*q_374;
	q_1362 = q_313*q_374;
	q_1363 = q_302*q_374;
	q_1366 = q_374*q_51;
	q_1370 = q_374*q_53;
	q_1372 = q_274*q_374;
	q_1374 = q_278*q_374;
	q_1375 = q_280*q_374;
	q_1377 = q_374*q_58;
	q_1381 = q_374*q_60;
	q_1385 = q_287*q_374;
	q_1386 = q_374*q_61;
	q_1387 = q_374*q_62;
	q_1389 = q_305*q_374;
	q_1391 = q_343*q_374;
	q_1396 = q_295*q_374;
	q_1397 = q_298*q_374;
	q_1398 = q_365*q_374;
	q_1400 = q_303*q_374;
	q_1403 = q_325*q_374;
	q_1404 = q_361*q_374;
	q_1406 = q_374*q_71;
	q_1408 = q_314*q_374;
	q_1409 = q_374*q_384;
	q_1411 = q_374*q_376;
	q_1412 = q_306*q_374;
	q_1414 = (3*q_374*x[7])/2.;
	q_1415 = q_312*q_374;
	q_1417 = q_374*q_64;
	q_1418 = q_374*q_65;
	q_1419 = q_337*q_374;
	q_1420 = q_327*q_374;
	q_1421 = q_328*q_374;
	q_1422 = q_374*q_67;
	q_1423 = q_374*q_68;
	q_1425 = q_335*q_374;
	q_1427 = q_374*q_383;
	q_1428 = q_369*q_374;
	q_1429 = q_338*q_374;
	q_1432 = -(q_374*x[6])/2.;
	q_1433 = q_345*q_374;
	q_1435 = (q_374*x[4])/2.;
	q_1436 = q_374*q_72;
	q_1437 = q_349*q_374;
	q_1438 = q_351*q_374;
	q_1439 = (q_374*x[7])/2.;
	q_1441 = q_354*q_374;
	q_1443 = q_356*q_374;
	q_1444 = q_357*q_374;
	q_1446 = q_374*q_385;
	q_1447 = q_364*q_374;
	q_1448 = q_374*q_379;
	q_1459 = q_374*q_85;
	q_1463 = q_374*q_79;
	q_1473 = q_1004 + q_1251 + q_384;
	q_1476 = q_1251 + q_383 + q_384;
	q_1490 = q_1132 + q_1145;
	q_1513 = q_1185 + q_132;
	q_1533 = q_374*(q_124 - 11*x[3]*x[3]);
	q_1569 = q_1185 + q_138;
	q_1587 = a*q_1152;
	q_1596 = q_1163*q_374;
	q_1600 = q_1185 + q_85;
	q_1601 = q_1194 + q_796;
	q_1608 = q_1213*q_374;
	q_1613 = -q_320 + q_343;
	q_1744 = q_1237*(q_469 - 11*a*a);
	q_1747 = q_1153*q_1218;
	q_1748 = q_1237*(q_1070 + q_153 + q_371*q_742);
	q_1749 = q_1237*(q_132 + q_682);
	q_1764 = q_1212*q_383;
	q_1771 = q_1237*q_1248;
	q_1789 = q_1213*q_85;
	q_1827 = q_1033 + q_1587;
	q_1830 = q_1600*q_374;
	q_1836 = q_346 + q_1212*x[5];
	q_1852 = q_1237*q_1513;
	q_1859 = q_1237*q_1600;
	q_1864 = sqrt (q_146*q_383 + q_1476*q_1476);
	q_1869 = q_1836*x[7];
	q_1882 = 1/q_1864;
	q_1894 = q_1476 + q_1864;
	q_1895 = sqrt (q_1894);
	q_1918 = q_1213*q_1894;
	q_1919 = q_1894*x[2];
	q_1924 = -q_1894/64.;
	q_1929 = q_1894/32.;
	q_1937 = q_1894/128.;
	q_1939 = q_1894*x[3];
	q_1941 = q_1894*q_374;
	q_1942 = M*q_1894;
	q_1947 = q_1894*q_1894;
	q_1948 = q_1894/4.;
	q_1949 = q_1894/2.;
	q_1991 = q_1894*q_356;
	q_2024 = -(q_1894*q_374)/128.;
	q_2025 = (M*q_1894)/64.;
	q_2038 = q_1894*q_387;
	q_2040 = q_1894*q_1918;
	q_2063 = (q_1894*q_374)/8.;
	q_2068 = -(q_1894*q_1894)/16.;
	q_2071 = q_1219*q_1894;
	q_2074 = q_1894*q_72;
	q_2078 = q_1225*q_1894;
	q_2081 = -(q_1894*q_374)/8.;
	q_2083 = q_1894*q_1939;
	q_2086 = q_1894*q_34;
	q_2088 = (q_1894*q_374)/128.;
	q_2089 = q_1193*q_1894;
	q_2108 = q_1894*q_383;
	q_2117 = q_1894*q_1941;
	q_2119 = q_1238*q_1894;
	q_2122 = q_1894*q_80;
	q_2123 = q_1894*q_85;
	q_2129 = q_1894*q_1947;
	q_2131 = q_1947/4.;
	q_2135 = (q_1894*q_1894*q_1947)/8.;
	q_2136 = q_144*q_1947;
	q_2138 = (q_1894*q_2129)/16.;
	q_2139 = q_119*q_2108;
	q_2142 = q_144*q_2129;
	q_2143 = q_153*q_2108;
	q_2166 = q_1071 + q_2131;
	q_2174 = q_1196 + (3*q_1894*q_1894)/4.;
	q_2194 = q_371 + (q_1882*(q_1476*q_382 + a*q_74*x[3]))/2.;
	q_2195 = q_360 + q_1476*q_1882*q_360;
	q_2196 = q_367 + q_1476*q_1882*q_367;
	q_2197 = 1/q_1895;
	q_2210 = q_1894*q_1895;
	q_2211 = q_1895*q_374;
	q_2213 = q_2142 + q_1947*q_83*(q_1012 + q_1056 + q_145 + q_375*q_81);
	q_2216 = q_1057 + q_2131;
	q_2217 = q_1949 + q_85;
	q_2218 = q_1*q_1895;
	q_2254 = q_1895*q_331;
	q_2264 = q_1220*q_1895;
	q_2308 = q_1222*q_1895;
	q_2315 = q_1223*q_1895;
	q_2358 = q_1225*q_1895;
	q_2369 = q_1193*q_1895;
	q_2372 = (q_1895*q_374)/64.;
	q_2377 = q_1098 + q_2138 + q_2143;
	q_2380 = q_1895*q_383;
	q_2381 = q_1895*q_368;
	q_2393 = q_1895*q_85;
	q_2402 = q_1895*q_1947;
	q_2403 = q_1895*q_1941;
	q_2415 = q_2063*q_2402;
	q_2416 = q_1013*q_2403;
	q_2420 = q_1057*q_2403;
	q_2421 = q_119*q_1895*q_2117;
	q_2422 = q_144*q_1895*q_2117;
	q_2423 = q_153*q_2381;
	q_2426 = q_142*q_1894*q_1895*q_374*(q_1003 + q_1004 + q_1249 + q_386);
	q_2428 = q_1895*q_2129*q_374*q_80;
	q_2432 = q_1427*q_153*q_1895;
	q_2433 = q_119*q_1427*q_2210;
	q_2440 = q_142*q_2393*q_996;
	q_2492 = q_2196*(q_977 + q_264*q_307 + q_340*q_78);
	q_2518 = q_1234*q_2196;
	q_2534 = q_2194*(q_1132 + q_85);
	q_2538 = (-3*q_2216)/4.;
	q_2545 = q_2195*(q_2136 + q_2139 + q_1057*q_95 - (3*q_1894*q_1947)/8.);
	q_2602 = q_2195*(q_1057 - (3*q_1894*q_1894)/4.);
	q_2604 = q_2195*q_2217;
	q_2611 = q_2197*q_2217;
	q_2616 = q_2216*q_2217;
	q_2630 = q_1895*q_2217;
	q_2637 = q_1346*q_1895*q_2136 + q_119*q_1346*q_1895*q_2123;
	q_2639 = q_1895*q_2196;
	q_2643 = q_1894*q_2217;
	q_2659 = q_1895*q_2194;
	q_2667 = q_2195*q_2216;
	q_2670 = q_2194*q_2216;
	q_2675 = q_2211 + q_42;
	q_2679 = q_1161*q_2197;
	q_2686 = 1/q_2217;
	q_2697 = q_2197*(q_775 + q_794);
	q_2719 = q_2195*(q_1198 + q_351);
	q_2751 = q_1213*q_2194;
	q_2757 = q_2195*x[2];
	q_2784 = q_1*q_2195;
	q_2786 = a*q_2197;
	q_2805 = q_2195*x[1];
	q_2808 = M*q_2197;
	q_2810 = q_2194*q_2197;
	q_2814 = q_2195*q_2197;
	q_2816 = q_2197*q_374;
	q_2819 = q_2196*q_2197;
	q_2849 = q_2217*q_2217;
	q_3097 = q_2166*q_2195*q_2217;
	q_3129 = (-3*q_1894*q_2194)/256.;
	q_3130 = q_1569*q_2196*q_2197;
	q_3262 = q_2216*q_2604;
	q_3389 = q_2166*q_2196*q_2217;
	q_3432 = q_1151*q_2195*q_2197;
	q_3470 = q_1947*q_2195;
	q_3540 = q_1947*q_2194;
	q_3546 = q_2217*q_2630;
	q_3567 = q_1600*q_2195*q_2197;
	q_3578 = q_1947*q_2196;
	q_3582 = q_2196*q_2211;
	q_3590 = q_1600*q_2196*q_2197;
	q_3638 = q_1895*q_2194*q_2216;
	q_3652 = q_2195*q_2210;
	q_4020 = q_1206*q_2197;
	q_4134 = q_1212*q_2195*q_2197;
	q_4145 = q_2197*q_2751;
	q_4211 = q_1215*q_2194*q_2197;
	q_4263 = q_1218*q_2197;
	q_4289 = q_2194*q_330;
	q_4357 = q_2194*q_383;
	q_4368 = q_2194*q_2197*x[4];
	q_4383 = q_2197*q_2784;
	q_4399 = q_2196*q_2197*x[6];
	q_4402 = q_2195*q_2197*x[5];
	q_4418 = q_2196*q_2197*q_374;
	q_4440 = q_2194*q_2197*q_374;
	q_4453 = q_2197*q_2805;
	q_4467 = q_1*q_2810;
	q_4471 = q_2814*q_374;
	q_4472 = q_2196*q_2197*x[1];
	q_4475 = q_1*q_2819;
	q_4552 = 11*q_2819*q_374;
	q_4554 = q_2810*q_308;
	q_4555 = (11*q_2819*q_374)/2.;
	q_4556 = q_2810*q_331;
	q_4557 = q_2819*q_387;
	q_4558 = q_1221*q_2819;
	q_4559 = q_2819*q_324;
	q_4560 = q_1126*q_2819;
	q_4561 = q_1214*q_2814;
	q_4563 = q_240*q_2819;
	q_4564 = q_1195*q_2819;
	q_4565 = q_2819*q_326;
	q_4566 = q_2810*q_366;
	q_4568 = q_1224*q_2810;
	q_4570 = q_1830*q_2819;
	q_4571 = q_1225*q_2819;
	q_4572 = q_2810*q_368;
	q_4573 = q_2814*q_315;
	q_4574 = q_1216*q_2810;
	q_4578 = q_1218*q_2819;
	q_4579 = q_1225*q_2810;
	q_4580 = q_1222*q_2810;
	q_4581 = q_2814*q_330;
	q_4582 = q_1221*q_2814;
	q_4585 = q_1209*q_2814;
	q_4586 = q_1211*q_2814;
	q_4587 = q_1207*q_2814;
	q_4588 = q_2819*q_315;
	q_4589 = q_2810*q_330;
	q_4590 = q_1209*q_2819;
	q_4591 = q_1220*q_2814;
	q_4592 = q_2814*q_321;
	q_4594 = q_1225*q_2814;
	q_4596 = q_1224*q_2814;
	q_4597 = q_2814*q_308;
	q_4598 = q_1222*q_2819;
	q_4599 = q_1216*q_2819;
	q_4601 = q_1216*q_2814;
	q_4602 = q_1233*q_2814;
	q_4604 = q_1219*q_2814;
	q_4605 = q_1221*q_2810;
	q_4607 = q_1218*q_2814;
	q_4608 = q_2819*q_321;
	q_4609 = q_1237*q_2819;
	q_4610 = q_1237*q_2814;
	q_4611 = q_2814*q_366;
	q_4612 = q_1224*q_2819;
	q_4613 = q_2819*q_366;
	q_4618 = q_1427*q_2810;
	q_4622 = q_1218*(q_1108 + q_1490)*q_2810;
	q_4628 = q_2810*q_870;
	q_4629 = q_2814*q_996;
	q_4630 = q_1318*q_2810;
	q_4648 = (11*M*q_2819*q_374)/2.;
	q_4651 = q_2819*q_374*q_57;
	q_4652 = q_1381*q_2819;
	q_4653 = q_1323*q_2814;
	q_4659 = (-3*q_2814*q_374*x[5])/2.;
	q_4662 = q_1324*q_2819;
	q_4663 = q_1459*q_2819;
	q_4666 = q_1446*q_2819;
	q_4667 = q_1346*q_2810;
	q_4668 = q_1436*q_2810;
	q_4670 = q_1428*q_2819;
	q_4673 = q_1409*q_2810;
	q_4674 = q_1448*q_2819;
	q_4675 = q_221*q_2819*q_374;
	q_4676 = q_1318*q_2819;
	q_4680 = q_2819*q_818;
	q_4682 = q_2819*q_326*x[3];
	q_4684 = q_1332*q_2814;
	q_4685 = q_2819*q_870;
	q_4688 = q_2814*q_870;
	q_4693 = q_1409*q_2814;
	q_4694 = q_2810*q_329*q_374;
	q_4697 = q_1418*q_2819;
	q_4699 = q_1427*q_2814;
	q_4700 = q_1859*q_2814;
	q_4702 = q_1412*q_2819;
	q_4703 = q_2819*q_996;
	q_4706 = q_1385*q_2819;
	q_4708 = q_1444*q_2819;
	q_4710 = q_1859*q_2819;
	q_4711 = q_1295*q_2819;
	q_4713 = q_1225*q_2197*q_2667;
	q_4716 = q_1295*q_2810;
	q_4717 = q_1459*q_2810;
	q_4720 = (a + M)*q_2810*q_374*x[3];
	q_4721 = q_1428*q_2810;
	q_4722 = q_253*q_2810*q_374;
	q_4724 = q_2814*q_771;
	q_4726 = q_1323*q_2819;
	q_4727 = q_1403*q_2810;
	q_4728 = q_1397*q_2810;
	q_4729 = q_1320*q_2810;
	q_4735 = q_1397*q_2814;
	q_4736 = q_1381*q_2814;
	q_4737 = q_1330*q_2819;
	q_4739 = q_1*q_2810*q_325;
	q_4740 = q_1437*q_2810;
	q_4742 = q_2819*q_324*x[4];
	q_4743 = q_2810*q_330*x[4];
	q_4745 = q_1463*q_2814;
	q_4749 = q_1335*q_2814;
	q_4750 = q_1*q_2819*q_70;
	q_4751 = q_1328*q_2810;
	q_4752 = q_264*q_2814*q_374;
	q_4753 = q_2810*q_701;
	q_4754 = q_2819*q_904;
	q_4755 = (-5*q_2810*q_374*x[4])/2.;
	q_4757 = q_2819*q_334*q_374;
	q_4758 = q_1429*q_2810;
	q_4760 = q_1436*q_2819;
	q_4761 = q_1386*q_2814;
	q_4762 = q_1435*q_2819;
	q_4763 = q_2814*q_346*q_374;
	q_4764 = q_2810*q_864;
	q_4765 = q_1396*q_2819;
	q_4766 = q_1444*q_2810;
	q_4767 = q_1348*q_2814;
	q_4768 = q_1415*q_2810;
	q_4769 = q_1415*q_2814;
	q_4773 = q_1444*q_2814;
	q_4775 = q_1441*q_2814;
	q_4776 = q_1411*q_2814;
	q_4777 = q_1463*q_2819;
	q_4778 = q_1436*q_2814;
	q_4779 = a*q_2814*q_331;
	q_4780 = q_1414*q_2810;
	q_4781 = q_2814*q_896;
	q_4782 = q_1415*q_2819;
	q_4783 = q_1396*q_2814;
	q_4784 = (9*q_2814*q_374*x[5])/2.;
	q_4785 = q_2819*q_911;
	q_4786 = q_2810*q_310*q_374;
	q_4787 = q_1411*q_2819;
	q_4788 = q_1448*q_2814;
	q_4789 = q_1391*q_2810;
	q_4790 = q_1372*q_2814;
	q_4791 = q_275*q_2810*q_374;
	q_4792 = q_2819*q_301*q_374;
	q_4793 = q_1374*q_2814;
	q_4794 = q_1397*q_2819;
	q_4795 = q_1417*q_2819;
	q_4797 = q_1375*q_2814;
	q_4798 = q_1412*q_2814;
	q_4799 = q_2810*q_332*q_374;
	q_4800 = q_1441*q_2819;
	q_4801 = q_1391*q_2814;
	q_4804 = q_1*q_2814*q_303;
	q_4806 = q_1215*q_1238*q_2810;
	q_4808 = q_1443*q_2819;
	q_4809 = q_1437*q_2814;
	q_4810 = q_1439*q_2810;
	q_4818 = q_2819*q_368*q_85;
	q_4831 = q_227*q_2819*q_368;
	q_4836 = q_4418*q_992;
	q_4837 = q_4418*q_977;
	q_4839 = q_2819*q_308*q_85;
	q_4841 = q_4471*q_654;
	q_4849 = q_119*q_4418;
	q_4853 = q_4440*q_738;
	q_4854 = q_1012*q_4440;
	q_4855 = q_4440*q_649;
	q_4859 = q_4440*q_656;
	q_4861 = q_1213*q_1436*q_2195*q_2197;
	q_4862 = q_287*q_4418*x[1];
	q_4866 = q_114*q_4440;
	q_4867 = q_4471*q_466;
	q_4872 = q_4471*q_657;
	q_4873 = q_433*q_4418;
	q_4874 = q_295*q_4440*x[1];
	q_4875 = q_306*q_4440*x[2];
	q_4878 = q_189*q_4440*x[2];
	q_4880 = q_1397*q_3567;
	q_4882 = q_4418*q_443;
	q_4885 = q_4440*q_455;
	q_4887 = q_4471*q_656;
	q_4888 = q_2810*q_357*q_374*(q_33 + q_69);
	q_4891 = q_4418*q_971;
	q_4893 = q_4418*q_62*x[2];
	q_4899 = q_25*q_4440*x[7];
	q_4900 = q_36*q_4440*x[7];
	q_4907 = q_275*q_4440*x[2];
	q_4909 = (5*q_4440*x[2]*x[7])/2.;
	q_4916 = q_4471*q_796;
	q_4917 = (9*q_4418*x[4]*x[4])/2.;
	q_4919 = q_4440*q_779;
	q_4920 = q_4418*q_851;
	q_4923 = q_1191*q_2819*q_356;
	q_4924 = q_4471*q_986;
	q_4925 = q_4418*q_814;
	q_4929 = q_4471*q_971;
	q_4930 = q_298*q_4440*x[7];
	q_4936 = q_4471*q_65*x[4];
	q_4937 = q_4418*q_68*x[4];
	q_4938 = q_4440*q_784;
	q_4940 = q_4471*q_983;
	q_4941 = q_4471*q_850;
	q_4943 = q_4418*q_852;
	q_4944 = q_4418*q_64*x[2];
	q_4946 = (3*q_310*q_4440)/2.;
	q_4947 = q_2810*q_314*q_387;
	q_4953 = q_1346*q_2819*q_369;
	q_4976 = q_383*q_4667;
	q_4981 = q_1386*q_2819*q_385;
	q_4983 = q_4668*q_77;
	q_4987 = q_4618*q_72;
	q_4988 = q_1377*q_2819*q_383;
	q_4993 = q_1346*q_250*q_2814;
	q_4998 = q_1377*q_2810*q_383;
	q_5002 = q_4618*q_79;
	q_5003 = q_384*q_4652;
	q_5008 = q_132*q_2814*q_331;
	q_5009 = q_132*q_4556;
	q_5011 = q_325*q_4761;
	q_5015 = q_1417*q_2814*q_345;
	q_5016 = q_345*q_4761;
	q_5019 = q_1223*q_134*q_2819;
	q_5020 = q_1223*q_134*q_2810;
	q_5022 = q_1370*q_2814*q_325;
	q_5031 = M*q_307*q_4554;
	q_5039 = q_2213 + q_2377 + q_2428 + q_142*q_1473*q_1894*q_1895*q_374 + q_1463*q_1894*q_1894*q_1895*(q_143 + q_384 + q_385);
	q_5051 = q_4618*q_569;
	q_5052 = q_1346*q_2819*q_569;
	q_5057 = q_1361*q_2814*q_686;
	q_5058 = q_1389*q_2814*q_813;
	q_5067 = q_314*q_4559*q_85;
	q_5068 = q_2810*q_310*q_324*q_85;
	q_5069 = q_134*q_1433*q_2814;
	q_5071 = q_307*q_4947;
	q_5076 = q_2213 + q_2377 + q_2426 + q_2428 + q_2440 + q_1463*q_1894*q_1894*q_1895*(q_1234 + q_385);
	q_5080 = q_1289*q_1789*q_2196*q_2210;
	q_5081 = q_2136*q_2195*q_2358;
	q_5095 = q_2810*q_60*q_664*q_85;
	q_5096 = q_1408*q_2814*q_384*q_79;
	q_5097 = q_1366*q_2814*q_345*q_85;
	q_5103 = q_4573*q_669*q_77;
	q_5120 = q_1418*q_153*q_1764*q_2814;
	q_5121 = q_153*q_1764*q_4697;
	q_5127 = q_114*q_153*q_4418*q_742;
	q_5133 = q_1212*q_145*q_153*q_2819*q_374*q_742;
	q_5148 = q_4722 + q_84;
	q_5153 = q_4775 + q_4794;
	q_5202 = q_4766 + q_84;
	q_5229 = -q_4557;
	q_5230 = q_4919 + q_4418*q_684;
	q_5231 = q_4900 + q_4418*q_555;
	q_5232 = -q_4558;
	q_5233 = q_4471 + q_4590;
	q_5234 = q_4740 + q_1439*q_2814;
	q_5236 = q_4662 + q_4810;
	q_5243 = q_4800 + q_69;
	q_5247 = q_4775 + q_78;
	q_5252 = q_4471 + q_4578;
	q_5256 = q_254 + q_4668;
	q_5261 = q_4766 + q_4775;
	q_5263 = -(q_2819*q_934);
	q_5265 = q_1027 + q_4983;
	q_5271 = q_4716 + q_69;
	q_5273 = q_85 + q_4440*q_457;
	q_5281 = a + q_4735;
	q_5289 = -q_4680;
	q_5372 = -(a*q_2810*q_368);
	q_5386 = q_5080 + q_1287*q_1947*q_2393;
	q_5390 = -q_4573;
	q_5391 = a + q_4612;
	q_5399 = -q_4872;
	q_5404 = -(q_1459*q_153*q_2814*q_742);
	q_5407 = q_371 + q_1423*q_2810;
	q_5432 = q_4574 + q_4708;
	q_5434 = q_4729 + q_69;
	q_5437 = q_4766 + q_69;
	q_5439 = q_4708 + q_4728;
	q_5441 = a + q_4769;
	q_5444 = 1/(q_2217*q_2849);
	q_5452 = q_4711 + q_4728;
	q_5472 = q_1013 + q_1948*q_2194;
	q_5475 = q_2686*x[7];
	q_5476 = -(q_1347*q_2810);
	q_5477 = q_153 + q_5051;
	q_5480 = q_4751 + q_84;
	q_5481 = q_4751 + q_69;
	q_5482 = a + q_4766;
	q_5483 = q_4729 + q_84;
	q_5484 = q_4798 + q_69;
	q_5485 = q_85 + q_4440*q_569;
	q_5486 = a + q_4579;
	q_5487 = q_4607 + q_4609;
	q_5488 = x[7] + q_1420*q_2810;
	q_5490 = q_4581 + q_4740;
	q_5491 = q_4783 + q_84;
	q_5492 = q_4909 + q_4916;
	q_5493 = q_85 + q_4471*q_923;
	q_5495 = -q_4947;
	q_5496 = q_4810 + q_1322*q_2819;
	q_5498 = q_4586 + q_4609;
	q_5504 = q_4787 + q_85;
	q_5505 = q_5019 + q_2810*q_310*q_387;
	q_5506 = q_386 + q_4943;
	q_5510 = q_240*q_2814*q_303 + q_241*q_4440*x[5];
	q_5511 = q_4794 + q_84;
	q_5512 = q_4920 + q_85;
	q_5513 = q_4609 + q_1210*q_2814;
	q_5514 = q_5022 + q_1191*q_2814*q_343;
	q_5515 = a + q_4765;
	q_5516 = -q_4418;
	q_5520 = -(q_1408*q_2810*q_310*q_376);
	q_5521 = q_4766 + q_4794;
	q_5522 = q_4769 + q_69;
	q_5523 = a + q_4601;
	q_5524 = a + q_4596;
	q_5525 = q_4773 + q_1441*q_2810;
	q_5530 = q_4418*q_686 + q_4471*q_813;
	q_5531 = a + q_4782;
	q_5532 = a + q_4783;
	q_5533 = q_4598 + q_4605;
	q_5535 = a + q_4790;
	q_5536 = -q_4383;
	q_5537 = -q_4787;
	q_5539 = q_4941 + q_4943;
	q_5540 = q_4471 + q_4609;
	q_5541 = q_132 + q_4418*q_752;
	q_5542 = q_4790 + q_4798;
	q_5547 = a + q_4794;
	q_5548 = -q_4601;
	q_5551 = a + q_4800;
	q_5552 = -q_4605;
	q_5553 = q_4475 + q_4610;
	q_5555 = q_85 + q_4471*q_851;
	q_5557 = -q_4804;
	q_5558 = -q_5031;
	q_5559 = q_4604 + q_4609;
	q_5560 = q_4418 + q_4610;
	q_5561 = q_4610 + q_1219*q_2819;
	q_5562 = q_4609 + q_4610;
	q_5563 = q_4810 + q_1432*q_2819;
	q_5564 = q_4808 + q_4809;
	q_5565 = q_4808 + q_4810;
	q_5567 = -q_4612;
	q_5570 = 1/q_2849;
	q_5651 = a + q_4735 + q_1421*q_2814;
	q_5657 = q_2675 + q_4775;
	q_5770 = q_5121 + (3*a*q_2040*q_2639*q_374)/16. + q_1057*q_1212*q_1287*q_1895*q_2196;
	q_5776 = q_4722 + q_4782 + q_69;
	q_5810 = q_128*q_4618 + q_2063*q_2659 + q_2381*q_85;
	q_5856 = q_4775 + q_4783 + q_69;
	q_5857 = a + q_4775 + q_4783;
	q_5858 = q_4591 + q_4598 + q_4780;
	q_5859 = q_4598 + q_4605 + q_4793;
	q_5860 = q_4591 + q_4598 + q_4791;
	q_5861 = q_5103 + q_310*q_4559*q_662 + q_4795*q_650*q_85;
	q_5862 = q_4791 + q_4808 + q_4809;
	q_5863 = q_4792 + q_4809 + q_4810;
	q_5864 = q_4810 + q_5564;
	q_5869 = q_2415 + q_2422 + q_2432 + q_2433 + q_119*q_3582*q_657 + q_153*q_250*q_2819*q_368 - (q_2196*q_2402*q_374*x[2])/8.;
	q_5871 = q_2420 + q_2421 + q_109*q_4663*q_657 + q_144*q_3582*q_657 + q_153*q_1895*q_996 + (q_1894*q_2402*q_374)/4. + q_108*q_1216*q_1894*q_2639 - (3*q_2196*q_2402*q_374*x[2])/16.;
	q_5872 = q_1098 + q_2138 + q_2142 + q_2143 + q_2428 + q_2440 + q_1152*q_144*q_1894*q_1894 - q_1151*q_142*q_1894*q_1895*q_374 + q_1463*q_1894*q_1894*q_1895*(q_1234 + q_384);
	q_5917 = q_5202*x[2];
	q_5932 = q_5039*q_5444;
	q_5936 = q_5487*x[2];
	q_5939 = q_5234*x[3];
	q_5982 = (q_4383 + q_4564)*x[2];
	q_5983 = q_5252*x[2];
	q_5994 = q_5535*x[3];
	q_6008 = -q_4574 + q_4708;
	q_6089 = -q_4571 + q_4728;
	q_6146 = q_5437*x[1];
	q_6148 = q_5486*x[1];
	q_6149 = q_5482*x[1];
	q_6179 = q_5434*x[2];
	q_6180 = q_5437*x[2];
	q_6187 = (a + q_4706 + q_4769)*x[3];
	q_6214 = q_302 + q_2675*x[1];
	q_6215 = 1/(q_2216*q_2216*(q_2213 + q_2377 + q_2426 + q_2428 + q_2440 + (q_1234 + q_1249)*q_1463*q_1894*q_1894*q_1895));
	q_6223 = q_5498*x[2];
	q_6225 = -q_4598 + q_5552;
	q_6235 = q_5860*x[7];
	q_6247 = 2*q_5565;
	q_6251 = -q_4471 + q_4609;
	q_6253 = -q_4776 + q_85;
	q_6255 = q_4609 + q_5536;
	q_6256 = q_5564*x[4];
	q_6260 = q_5540*x[2];
	q_6263 = a + q_5548;
	q_6266 = q_5560*x[1];
	q_6268 = q_5565*x[7];
	q_6277 = q_5864*x[6];
	q_6279 = a + q_5567;
	q_6291 = q_371*q_5153;
	q_6463 = q_2210*q_5570;
	q_6566 = a + q_5548 + q_5567;
	q_6662 = a + q_4613 + q_5390;
	q_6739 = q_5523 + q_5567;
	q_6749 = q_1947*q_5570;
	q_6783 = M*q_6215;
	q_6793 = q_351*q_5858;
	q_6801 = q_320*q_5504;
	q_6822 = -q_4788 + q_5537 + q_85;
	q_6825 = q_313*q_5562;
	q_6835 = q_142*(q_4662 + q_4809 + q_4810);
	q_6836 = q_5504*q_687;
	q_6838 = q_1007*q_5559;
	q_6841 = q_1036*q_5864;
	q_6854 = q_597*q_6793;
	q_6855 = q_351*q_38*q_5864*x[3];
	q_6869 = q_1213*q_1947*q_1947*q_27*q_5452;
	q_6883 = q_1057*q_145*q_1918*(q_4574 + q_4711);
	q_6886 = q_1459*q_153*q_1895*(a + q_4702 + q_4790)*q_742;
	q_6939 = q_4925 + x[3]*(q_4554 + q_1414*q_2814);
	q_7004 = q_4418*q_697 + (q_4612 + q_4766)*x[2];
	q_7007 = a + (q_4578 + q_4610)*x[2];
	q_7010 = -q_6146;
	q_7046 = q_6214*q_6214;
	q_7106 = q_373*q_5515 + q_5491*x[2];
	q_7160 = q_443*q_4440 + q_5407*x[1];
	q_7225 = q_2686*q_6214;
	q_7226 = q_71 + q_367*q_5498;
	q_7227 = q_6251*x[5];
	q_7229 = a + q_367*q_5559;
	q_7232 = a + q_6260;
	q_7233 = q_6263*x[6];
	q_7234 = q_6266 + q_69;
	q_7410 = q_383*q_6263;
	q_7423 = q_383*q_5493 + q_448*q_4618 + q_448*q_4717;
	q_7523 = q_2604*q_6214;
	q_7567 = q_2196*q_2216*q_6214;
	q_7638 = q_1947*q_6089;
	q_7705 = q_1894*q_5444*q_6214;
	q_7760 = q_2211*q_6214;
	q_7794 = q_371*q_6739;
	q_7861 = q_1894*q_2686*q_5472*q_6214;
	q_7881 = q_2637 + q_2138*q_5452 + q_2143*(q_4708 + q_1396*q_2810) + q_104*q_2083*(q_4710 + q_4885) + q_107*q_2358*q_3578 + q_153*q_4849*q_742;
	q_8000 = a - (q_4590 + q_4607)*x[2];
	q_8001 = a - q_5562*x[2];
	q_8316 = q_7046*(q_5080 + q_5121 + q_2415*(q_4706 + q_69) + q_2422*q_5243 + q_2432*(q_69 + q_1375*q_2819) + q_2433*q_5243 + q_1268*q_2040*q_2639 + q_1057*q_1213*q_1287*q_1895*q_2196);
	q_8320 = q_7046*(q_2135 + q_5120 + q_2136*(q_1003 + q_4861) + q_2422*q_5247 + q_2432*(q_4797 + q_78) + q_2433*q_5247 + q_1057*q_2074*q_5856 + q_1947*q_2086*(q_4684 + q_4797 + q_69) + q_2081*q_2402*q_5484);
	q_8723 = q_7007*q_967;
	q_8742 = q_5386 + q_5770 + q_2415*q_6566 + q_2432*(a + q_4573 + q_4613) + q_2433*(q_4601 + q_5391);
	q_8746 = q_5386 + q_5770 + q_2415*q_6739 + q_2432*q_6662 + q_2433*(q_5391 + q_5548);
	q_8747 = q_1939*q_2136*(q_4893 + x[1]*(q_4697 + x[2]));
	q_8756 = q_1013*q_119*q_1947*(q_4873 + x[1]*(q_4760 + x[2]));
	q_8759 = q_1098*q_2381 + q_119*q_2078*q_2402 + (3*q_1947*q_7638*x[2])/16. + q_104*q_1947*q_250*(q_4570 + q_4885) + q_107*q_1919*q_1947*(q_4682 + q_4728) + q_119*q_1225*q_2402*(q_383 + q_384 + q_85) + q_119*q_2123*q_657*(q_4682 + q_1332*q_2810) + q_1225*q_153*q_2210*(q_1003 + q_384) + (q_1947*q_2402*q_374*x[3])/8. + q_132*q_1346*q_153*q_2819*q_383;
	q_9014 = (q_4703 - q_6179)*x[1];
	q_9017 = -((q_4710 + q_6180)*x[1]);
	q_9753 = -q_4713 - q_7861 + q_1444*q_3652 + (3*q_2670*q_7225)/4. - (q_1894*q_2670*q_5570*q_6214)/4. + (q_2686*q_3638*q_374*x[1])/4.;
	q_9760 = q_1949*q_2670*q_7046 - q_2078*q_2630*q_7523 - q_2358*q_3262*q_6214 + q_2643*q_5472*q_7046 + q_1421*q_2616*q_2659*q_6214 + q_2194*q_2217*q_2538*q_7046 + q_2216*q_2611*q_368*q_7523 + q_2217*q_2381*q_2616*q_5657;
	q_9764 = q_2138 + q_5120 + q_2136*(q_383 + q_4861) - q_2432*(a - q_4611) + q_1057*q_2074*q_5651 + q_1302*q_1947*q_2393 + q_1947*q_2086*(q_4798 + q_5535) + q_2081*q_2402*q_5524 + q_114*q_1427*q_2210*(a - q_4596);
	q_9766 = q_2415*(q_373*q_5531 + (q_4769 + q_84)*x[2]) + q_2422*q_7106 + q_2432*(q_373*(a + q_1332*q_2819) + (q_4684 + q_84)*x[2]) + q_2433*q_7106 + q_119*q_1947*q_430 + q_153*q_1894*q_430 + (q_1947*q_1947*x[1])/8. + q_1212*q_149*q_250*q_4818 + q_1894*q_1947*q_83*(-q_4685 + (a + q_4588)*x[1]);
	q_10118 = q_5039*(q_4713 + q_7861 + q_1295*q_3652 + q_2194*q_2538*q_7225 + q_1948*q_2670*q_5570*q_6214 - (q_2686*q_3638*q_374*x[1])/4.) + q_2643*q_3097*q_80*x[3] + q_1947*q_250*q_2686*q_79*q_8746;
	q_10330 = q_5872*q_8746 + q_2122*q_2849*q_3389*q_6214 + q_1895*q_2217*q_368*q_6214*q_70*q_7881;
	q_10469 = q_2136*q_7160 + q_153*q_2358*(q_750 - q_5434*x[1]) + q_2123*q_466*(q_4885 + q_5271*x[1]) + (3*q_1894*q_3540*x[1])/32. + q_119*q_1895*q_2078*(q_7010 + q_750) + q_1212*q_1268*q_1894*q_1894*q_2659 + q_1213*q_1418*q_153*q_2810*q_383 + q_1894*q_1894*q_2194*q_94*x[1];
	q_10474 = q_5081 + q_5404 + q_2135*q_5525 + q_2422*q_7160 + q_119*q_2083*(q_302 + q_4700 - q_6149) - q_153*q_1939*(q_1148 + q_4699 + q_6148) + q_1212*q_21*q_2129*q_2194 + q_1213*q_153*q_20*q_4357 + q_1459*q_2210*q_466*(q_4878 + q_6146);
	q_10516 = q_5570*(q_5039*q_7881 + q_2643*q_2849*q_3389*q_416 + q_2217*q_2403*q_448*q_6214*q_8746);
	q_10997 = -(q_5076*q_5570*q_7881) + q_1947*q_415*q_6214*q_9753 + q_2117*q_2630*q_415*q_5810;
	q_11356 = q_5872*q_9753 + q_376*q_6214*q_6749*q_7881 + q_1947*q_2217*q_5810*q_6214*q_67;
	q_11368 = q_2136*(q_302*(q_4882 + q_682) + q_373*(q_119*q_4599 + q_383*q_5532) + q_4570*q_674) + q_108*q_2129*(q_4680 + q_373*(a + q_4737 + q_4783) + (q_4737 + q_78)*x[2]) + q_1237*q_2402*(q_1248*q_882 + q_153*x[1]) + q_153*q_2403*q_430 + q_1947*q_2068*(q_4862 + q_750 + q_360*q_5441) + q_1057*q_119*q_1894*(q_5289 + q_373*(a + x[2]*(q_4609 + q_1187*q_2814)) + (q_4794 + q_78)*x[2]) + q_1287*q_1895*q_2129*(-q_4688 + q_5289 + x[1]*(a + q_377*q_5562)) + (q_1947*q_2402*q_374*x[2])/8. + q_145*q_1789*q_1895*q_6662*q_996 + q_1213*q_1213*q_128*q_1427*q_153*q_2819;
	q_11374 = q_1057*q_2136*(q_4688 + q_1744*q_2814 + q_373*(q_4722 + 2*q_5547) + q_71*x[2]) + q_108*q_2129*(q_4993 + q_1748*q_2814 + q_250*q_381 + q_254*q_329*(q_4794 + q_5482)) + q_153*q_2139*(q_750 + q_373*q_5486 + q_1151*q_1211*q_2814) + q_2074*q_2432*(-((q_4572 + q_4782)*x[2]) + (q_4572 + q_4782 + q_69)*x[1]) + q_2088*q_2402*q_3470 + q_1036*q_153*q_153*q_4471 + q_108*q_1941*q_2402*(q_302*(q_4572 + q_4794) + (q_1003 + q_4873 + q_5372)*x[1]) + q_1098*q_20*q_2751*x[3] + q_121*q_1947*q_1947*(q_1148 + q_4694 + q_1747*q_2814) + q_1459*q_2402*q_474*(x[1]*(q_4866 + q_4440*q_654 + q_5511*x[3]) - x[2]*(q_1771*q_2810 + q_4418*q_455)) + q_1929*q_1947*q_1947*(-q_4693 + q_4694 + q_1749*q_2814 - q_6279*x[2]) - (3*a*q_2040*q_2402*q_374*q_5521)/16.;
	q_11378 = q_2686*(q_2422*(q_1346*q_3590 + q_360*(q_1444*q_3567 + q_302*q_5256) + q_385*(q_4618 + q_4866 + q_84*x[3]) + q_1237*q_2810*(q_153 - q_1151*q_384 - 9*a*a*q_383)) + q_108*q_2129*(x[3]*(q_124 + q_4724 + q_676 + q_973 - q_1*q_2814*q_337) + q_1608*q_2810*q_778) - q_1098*q_2211*(q_4622 + q_6291) + q_114*q_2416*(q_360*(q_4699 + q_6180) - q_385*q_5483 + x[3]*(q_2819*q_661 + q_1237*q_2810*(q_106 + q_212*x[2]))) + q_108*q_1941*q_2402*(q_382*q_5153 + q_1218*(q_1108 + q_1185 + q_1490)*q_2810) + q_153*q_1894*q_466*(2*(q_145 + q_5399 - q_714) - q_385*q_5481 + x[1]*(q_4629 + q_5480*x[2])) + q_1937*q_1947*q_1947*q_2194 + q_1947*q_1947*q_2369*(q_6291 + q_1237*q_2810*(q_132 + q_676 + q_973)) + q_1947*q_1947*q_50*(q_1375*q_4145 + q_371*q_5651) + q_1947*q_474*q_85*(q_1016 + q_147 - q_385*q_5148 + x[1]*(q_5148*x[2] + q_1248*q_2814*q_374) + q_1216*q_1600*q_2814) + q_145*q_153*q_1608*q_2814*q_742);
	q_11792 = -(q_5076*q_8746) + q_2643*q_662*(q_5081 + q_5404 + q_2138*(-q_4568 + q_4594) + q_2422*(q_433*q_4440 + q_5256*x[1]) + q_119*q_2083*(q_1148 + q_4700 + q_6149) + q_153*q_1939*(q_1148 - q_4699 + q_6148) + q_1212*q_153*q_20*q_4357 + q_1213*q_21*q_2129*q_2194 + q_1459*q_2210*q_466*(q_4885 + q_7010)) + q_2403*q_2849*q_3097*q_415;
	q_11930 = q_5133 + q_6869 + q_6883 + q_8747 + q_8756 + q_119*q_2416*(q_9014 + 2*(q_1147 + q_4872)) + q_2136*q_2358*(q_1827 + q_9017 + q_1248*q_1397*q_2195*q_2197) + q_108*q_1941*q_2402*(q_4874 + q_371*q_6566) + q_1947*q_1947*q_2369*(q_4875 + (a + q_4706 + q_4790)*x[3]) + q_1459*q_153*q_1895*(a + q_4702 + q_4769)*q_742;
	q_11931 = q_5133 + q_6869 + q_6883 + q_6886 + q_8747 + q_8756 + q_119*q_2416*(q_9014 + 2*(q_1147 + q_5399)) + q_2136*q_2358*(q_1827 + q_4880 + q_9017) + q_108*q_1941*q_2402*(q_4874 + q_7794) + q_1947*q_1947*q_2369*(q_4875 + q_6187);
	q_12104 = q_5872*(q_5133 + q_6886 + q_119*q_2416*(q_1034 + q_1035 + (q_4703 + q_6179)*x[1] - q_250*q_2814*q_368) + q_2136*q_2358*(q_1035 + q_1587 + q_4880 + x[1]*(q_6180 + q_1771*q_2819)) + q_1013*q_114*q_1947*(q_4882 + x[1]*(x[2] + q_1423*q_2819)) + q_104*q_1939*q_1947*(q_4418*q_652 + x[1]*(x[2] + q_1387*q_2819)) - q_1057*q_145*q_1918*q_5432 + q_108*q_1941*q_2402*(q_7794 + q_298*q_4440*x[1]) + q_1947*q_1947*q_2369*(q_6187 + q_274*q_4440*x[1]) + q_1213*q_1947*q_1947*q_5439*q_83) - q_2038*q_3546*q_6214*(q_2637 + q_5127 + q_2138*q_5439 - q_2143*q_5439 + q_108*q_2358*q_3578 + q_144*q_2083*(q_4710 + q_4878)) + q_1409*q_1895*q_2129*q_23*q_6214*x[2]*(q_2416 + q_2423 + q_104*q_1427*q_2659 + q_107*q_2194*q_2403 + (3*q_1895*q_3540*q_374)/16. - (5*a*a*q_1057*q_4440)/2.) + q_2174*q_2196*q_2849*q_2849*q_383*q_6214*q_656;
	q_12249 = q_11930*q_5932 + q_1428*q_2210*q_8742 - q_1428*q_6463*q_8316 + q_12*q_1895*q_1947*q_250*q_2545*q_374*q_384*q_5570;
	q_12250 = -(q_10474*q_1895*q_2119) + q_11931*q_6749*q_852 + q_1444*q_2197*q_2602*q_5039 + q_10469*q_1947*q_5570*q_7046*q_79;
	q_12251 = q_5872*(-(q_2670*q_7760) + q_2194*q_2616*q_354 + q_1218*q_2611*q_2670*q_6214 - q_2217*q_2218*q_5472*q_6214) - q_10474*q_1942*q_2849 + q_11931*q_1411*q_2210 - q_1427*q_2217*q_2602*q_2611*q_2849*q_369;
	q_12253 = q_5570*(q_1098*q_5127 + q_1098*q_1422*q_2402*(q_4818 + q_5432*q_676 + x[1]*(-q_5994 + q_2810*q_315*q_367) + q_1346*q_2819*q_298 - q_2810*q_315*q_384 + q_2810*q_315*q_85) - q_1098*q_153*q_3582*q_742 + q_1098*q_1947*q_466*(q_4981 + q_379*(q_42 + q_6825) + q_384*q_4761 + q_77*x[2] + q_1153*q_1436*q_2196*q_2197) + q_121*q_1947*q_2129*(-(q_1009*(q_1347*q_2819 + (q_371 + q_4668)*x[2])) + q_371*(-q_1017 + q_151*x[2] + q_4693*q_77 + q_119*(q_1003 + q_132)*q_2819*q_374) + q_953*(q_4853 + q_254*(a + q_4601 + q_4765))) + q_153*q_2129*q_474*(q_1083 + q_376*(q_1152*q_69 - q_385*(q_4630 + q_69) + q_329*q_371*q_5540) + q_682*(q_953 + q_4666*q_79 + q_1436*q_2197*q_2518) + q_971*(-q_4629 + (q_4630 + q_84)*x[1])) + q_1947*q_1947*q_1947*q_59*(q_1009*(q_4708 + q_1348*q_2810) - q_379*((a + q_5936)*x[3] + q_252*q_4440*x[2]) + x[3]*(q_1018 + q_4693*q_64 + q_1436*q_2196*q_2197*(q_106 + q_383))) + q_1947*q_1947*q_2088*q_2402*(-q_4670 + q_2810*q_896) + (3*q_2129*q_2402*q_3578*q_374*x[3])/512. + q_1459*q_18*q_1947*q_2402*x[3]*(q_385*(q_4663 + q_5917) + q_4728*q_658 + (q_1016 + q_1587 + q_4880)*x[1] + q_143*q_2810*q_661 + q_1513*q_2819*q_374*q_738 - q_1*q_1152*q_2196*q_2197*q_85) + q_1947*q_1947*q_2402*q_374*q_9*(q_329*q_5441 + q_5452*(q_146 + q_264*x[2]) + q_1372*q_2810*q_385) + q_1947*q_1947*q_50*q_85*x[3]*(q_1046*(q_113 + q_383) + q_728*(q_1587 - q_384*q_5202 + x[2]*(q_4700 + q_1163*q_1237*q_2819)) + a*q_6*q_840 + q_1830*q_2814*q_971 + q_385*q_70*(q_5917 + q_1852*q_2819) + q_1436*q_2196*q_2197*(-q_1036 + q_156 + 12*a*a*q_383)) - (M*q_1947*q_2123*q_2402*q_374*(q_312*q_4673 + q_373*(q_4628 + q_7232*x[3]) + q_385*(q_4711 + q_4768) + q_1216*q_1248*q_2810 + q_1294*q_2819*q_384 + q_1444*q_2196*q_2197*(q_124 + q_383)))/16. + (3*a*a*q_1947*q_1947*q_2358*q_3578)/64. + q_2123*q_2402*q_27*q_374*q_77*x[3]*(q_360*(q_1033 + q_1133 + (q_4699 + q_4710)*x[2]) - q_385*(q_5483*x[2] + q_1152*q_1237*q_2819) + q_4667*q_95 + q_188*q_4673*x[2] + q_1153*q_2819*q_374*q_697 + q_119*q_2819*q_374*(q_469 + q_85)) + q_1473*q_153*q_153*q_1894*q_2196*q_23*q_383*x[3]);
	q_12269 = -(q_11931*q_5076) + q_10474*q_1947*q_2849*q_851 + q_10469*q_1895*q_2117*q_7046*q_852 + q_1346*q_2174*q_2195*q_2380*q_2849*q_2849*q_79;
	q_12270 = q_5872*(-(q_2211*q_7567) + q_1218*q_2611*q_7567 + q_2218*q_2616*q_5551 + q_1895*q_2071*q_2196*q_2217*q_6214) - q_11930*q_2630*q_998 + q_2119*q_3546*q_8742 + q_12*q_1409*q_2402*q_2545*x[2];
	dx[0] = -(q_1895*q_387*q_5570*q_6215*(q_1098*q_1947*q_83*(-(q_1009*(q_343*(q_78 + q_254*q_4467 + q_2757*q_4020) + q_5565*q_965 + q_227*q_2814*q_701)) + q_307*q_5057 + q_967*(q_5057 + q_5058 + q_728*(q_4924 + (q_4790 + q_5486)*x[5]) + q_777*(q_344 - x[3]*(q_4580 + q_1439*q_2819)) - 4*x[3]*(q_369*q_5564 - q_5485*x[7])) - x[1]*(q_777*(-(q_351*(q_4810 + q_5487*x[6])) + q_5486*q_849 - 2*q_227*(q_4580 + q_6251*x[7])) + x[3]*(q_319*(x[7]*(a*(q_70 + q_71) + q_4766*(q_39 + q_56)) + q_1172*q_2819*q_988) + q_333*(q_958 + q_221*q_4582) + q_1172*q_227*q_4402) + q_1361*q_2814*q_307*q_53) + q_1029*q_227*q_4581 + q_1029*q_325*q_4572 + q_117*q_250*q_323 + q_124*q_227*q_310 + q_129*q_227*q_355 + q_131*q_325*q_383 + q_132*q_227*q_227 + q_137*q_307*q_307 + q_142*q_345*(q_4790 + q_5484) - q_310*q_4588*q_603 + q_323*q_4667*q_493 + q_4667*q_56*q_601 + q_1029*q_2819*q_323*q_368 + q_1327*q_2814*q_58*q_602 + q_1346*q_2814*q_325*q_569 + q_1346*q_2814*q_46*q_586 + q_1346*q_2819*q_320*q_493 + q_1346*q_2819*q_58*q_586 + q_1377*q_2814*q_310*q_666 + q_1389*q_2814*q_64*q_832 + q_227*q_2810*q_314*q_315*q_70) + q_121*q_2117*q_2402*(q_1009*(q_1013*(q_5510 + q_258*q_5565) - q_383*(q_296*(q_4916 + q_7233) + q_343*q_5511 - 2*q_1601*q_5565) - q_742*(q_4804 + q_339*q_5565 + q_4440*q_629) + q_85*(q_319*(-2*(q_4930 + q_4940) + (a - q_4599)*x[6]) + q_5513*q_886 + q_5565*q_783)) + q_1013*(q_750*(q_304*(q_365 + q_1447*q_2814) - q_309*(q_4755 + x[7])) + q_971*(q_243*q_4582 + q_4440*q_827 + q_1219*q_2810*(q_320 + 2*q_325)) + q_142*q_2810*q_664) - q_1036*(q_1043 + q_6801 + (q_1041 + q_1042)*q_4809 + q_5505*x[6] + x[7]*(q_5020 + q_5506*x[7])) - q_383*(q_5103 + q_155*(q_320 + q_4757 + q_4758) + q_319*(q_5096 - q_882*(q_4919 + (q_4760 + q_4761)*x[6]) + q_1223*q_156*q_2814 + q_384*(q_247 + q_4762)*q_77) + q_142*x[2]*(q_4917 - 14*q_334 - q_2810*q_904 + q_4418*q_687 + q_1207*q_2819*q_325) + q_149*q_343*(q_4783 + q_71) + q_376*(q_4605 + q_4792)*q_867) - q_742*(q_5095 + q_971*(q_4754 + q_339*(q_4809 + q_4810) + q_4440*q_692) + q_137*x[4]*((q_38 + q_4601)*x[7] + q_1220*q_2810*q_298) + q_310*(q_309 + q_365)*q_78 + q_45*q_5860*q_992) + q_85*(q_153*(-q_325 + q_6256 + q_1237*q_2810*q_338) + q_882*(q_334*q_73 + q_344*q_5864 + q_1433*q_2819*q_79) + q_137*q_868*(q_4762 + x[6]) + q_1361*q_2819*q_307*q_852) - x[1]*(q_383*(q_5097 + q_85*(q_5514 + q_319*(q_4923 + q_249*q_4810)) + q_971*(q_4801 + q_319*(q_4598 + q_4810) + q_4471*q_692) + q_1050*q_1188*q_1188 + q_118*x[4]*(q_269*q_4574 - (q_5531 + q_5548)*x[6] + x[5]*(q_55 + q_5513*x[2]))) + q_85*(x[5]*(q_1076 + q_145*q_5864 - q_971*(q_5533 + (q_4607 + q_5516)*x[5])) + q_137*x[4]*(q_5515*x[6] + (q_4791 + q_7227)*x[2]) + q_1422*q_2814*q_345*q_85) + q_143*x[3]*(q_333*(q_4764 + q_4471*q_677 + x[6]*(a + q_5553*x[2])) + x[5]*(x[7]*(q_132 + q_376*(q_4592 + q_4609)) + q_1422*q_2810*(q_314 + q_637)) + q_1377*q_2810*q_886) + q_254*q_383*(q_333*(q_4763 + q_5532*x[6]) + x[5]*((q_118 + q_5512)*x[7] + q_1463*q_2810*(q_1194 + q_346))) + q_369*q_742*(q_4801 + q_319*(q_4605 + q_4808) + q_325*q_4610)) - q_1077*q_383*q_5858 + q_1600*q_379*q_5859*q_832) + q_125*q_1947*q_2129*(a*(q_1017*(q_278*q_4591 + q_296*q_5565 + q_320*q_4604) + q_343*(q_153 - q_2814*q_379*q_818) - q_344*((q_1052 + q_145)*x[6] + q_358*q_4596*q_58) + q_376*(q_5069 + q_360*(q_319*(-q_4799 + q_6279*x[6]) + q_343*(a + q_4798) - x[6]*(q_4938 + q_5551*x[6])) + q_783*(q_380*q_5565 + (a + q_4611)*x[5])) + q_971*(q_319*(q_4936 + 5*q_5565*x[1]) + q_320*q_7234 + q_336*(q_4937 + q_4938) - q_343*(q_4797 + q_69) - q_1233*q_2810*q_338) - q_358*q_77*(q_4799 + q_4936 + q_279*(a + q_1421*q_2819))) + q_383*(-q_5067 - q_5068 + q_1042*q_314 + q_296*(q_4919*(q_56*x[2] + (q_57 + q_69)*x[1]) + x[6]*(a*(q_132 + (q_4602 + q_4795)*x[2]) + x[1]*(q_975 + q_1208*q_2819*q_72))) + q_337*q_5022 + q_849*(q_1009 + q_5555*q_71 + q_4471*q_778*(q_60 + q_78)) + q_345*(q_5542 + q_74)*q_77 + q_70*x[4]*(q_124*q_5862 - q_302*x[5] + q_384*q_5863 + q_385*(q_4793 + q_5565) + x[1]*(-q_7233 + q_319*q_5547)) + q_1363*q_2814*q_325*q_51) + q_1036*q_73*(q_325 - q_6256 + q_1223*q_269*q_2810) + q_371*q_383*(q_1215*q_803 + x[4]*(-q_4806 + q_6822*x[7])) + q_69*x[3]*(q_5071 + q_1031*(-q_4789 + q_5557 + q_6268) + q_132*q_878 + q_137*q_872 + q_145*q_4739 + q_145*q_4754 + q_145*q_4804 + q_303*q_5003 + q_967*(q_1463*q_4211 + q_304*(q_5539 + q_85)) - x[1]*(q_5558 + q_803*(q_4930 + q_7232*x[6]) + x[5]*(q_4947 + x[7]*(q_5541 + q_4573*q_70))) + q_2814*q_310*q_314*q_387)) + q_153*q_2129*q_520*(q_1003*(q_1031*(q_4789 + q_4804 + q_6268) + q_967*(q_1333*q_4211 + q_304*(q_4920 + q_5493)) - x[1]*(q_5031 + q_803*(q_4930 + x[6]*(a + q_6251*x[2])) + x[5]*(q_5495 + x[7]*(q_1315 + q_6255*q_975))) + x[2]*(x[5]*(q_5495 + (q_132 + q_5537)*x[7]) + q_323*(q_4783 + q_69)*q_81)) + q_154*q_1869 + q_383*q_6855 + q_742*(q_343*(3*q_6253 + q_1204*q_4453) - x[5]*(2*(M*q_5492 + q_4938*(q_33 + q_84)) + x[6]*(q_5541 + q_1205*q_4472 + q_4573*q_69)) - q_2786*q_4289*(q_775 + 9*q_364) + q_325*(q_4775 + q_5491)*q_60 - a*q_2196*q_2697*q_324) + x[3]*(q_1097 + q_1076*q_314 + q_296*(q_4810*(q_1079 + q_376*(q_384 + q_386) + x[1]*(q_213*q_85 + q_33*q_384)) + x[6]*(q_153 + q_1031*(a + q_367*q_6251) + (q_4602 + q_4777)*q_882 + x[1]*(q_130*x[2] + q_384*(q_1370*q_2819 + q_4383*q_73) + q_1181*q_119*q_2819) + q_1409*q_2819*q_552)) + q_343*(q_154 + q_1031*(q_71 + (q_4475 + q_4587)*x[2]) + q_137*q_384 - q_142*q_4601 + x[1]*(q_1051 + q_384*(q_4750 + q_1195*q_2195*q_2808) + q_1180*q_2814*q_85) + q_1422*q_2814*q_840 + q_385*q_4611*q_60) + q_118*x[4]*(q_307*q_46 + q_384*(q_4749 + q_5496) + q_385*(q_4784 + q_5565) + q_5862*q_85 + x[1]*(-q_4764 + q_319*q_7226 - x[6]*(a + q_377*q_5559))) + q_142*q_345*(q_74 + q_2805*q_4020 + q_1207*q_2197*q_2757) - q_145*q_314*q_4559 - q_335*q_385*q_4786 + q_4761*q_762*q_85 + q_1321*q_2814*q_314*q_722 + q_1333*q_2814*q_314*q_867 + q_1408*q_2810*q_310*q_379 + q_1408*q_2819*q_314*q_379 - q_1408*q_2819*q_335*q_385 + q_1417*q_2814*q_755*q_85 - q_145*q_2810*q_310*q_324)) + q_153*q_2143*q_466*(q_6855 + q_138*q_1869 + x[3]*(q_343*(q_6253 + q_1180*q_4453) + q_5856*q_847 - x[5]*((q_4940 + q_4946)*q_73 + x[6]*(q_4724 + q_5504 + q_1181*q_4472) + q_1208*q_2810*q_332) - q_1398*q_2819*(q_364 + q_775) - q_1404*q_2194*q_2697)) + q_1013*q_107*q_1941*q_2402*(q_1009*(q_371*(q_296*(q_5492 + (q_4737 + q_5535)*x[6]) + q_343*(q_84 + (q_4418 + q_4587)*x[2]) + q_5565*(q_314 + q_783)) + q_383*(q_5510 + q_224*q_5565) - q_5490*q_977) + q_383*q_6854 + q_383*(q_151*q_6235 + q_971*(q_4739 + q_4804 + q_323*q_4563 + q_4440*q_687 + q_1220*q_2810*q_294) + q_137*x[4]*(x[7]*(q_29 + q_1362*q_2814) + q_1220*q_233*q_2810) + q_310*q_78*(q_854 + q_81*x[5]) + q_1311*q_2810*q_345*q_77) + q_742*(q_6836 + q_348*q_5505 + (q_4735 + q_71)*q_976 + x[5]*(q_5008 + x[2]*(q_4919 + (q_4736 + q_4760)*x[6])) + x[7]*(q_5009 + (q_141 + q_4944)*x[7])) - q_85*(q_750*(a*q_323 + q_364*(q_4582 + q_4740)) + q_307*q_376*q_5490 + q_1433*q_2810*q_72*q_77) + x[1]*(q_138*(x[5]*(-((-q_4781 + q_85)*x[7]) + q_1223*q_139*q_2810) + q_1429*q_2814*q_77 + q_1463*q_2810*q_886) + q_682*(q_803*(q_4786 + q_4936 + q_7229*x[6]) + x[5]*(x[7]*(q_1315 + q_1007*q_5561) + q_1463*q_2810*(q_637 + q_226*x[2])) + q_1422*q_2810*q_886) - q_742*(q_5011 + x[5]*((a + q_30)*q_4810 + q_1174*q_2819*q_356) + q_1174*q_2814*q_629) + x[3]*(q_5097 + q_1050*(q_320 + q_827 + q_226*x[5]) - q_85*(q_319*(q_4919 + q_1202*q_2819*q_356) + q_1202*q_2814*q_343 + q_1403*q_2814*q_64) + q_971*(q_319*(q_4589 + x[6]*(q_5536 + q_1206*q_2819)) + q_343*(q_4418 + q_1195*q_2814) + x[6]*(q_4753 + (q_4585 + q_4608)*x[6])) + q_130*x[4]*(q_4907 - (a + q_6223)*x[6] + q_7226*x[5]))) + x[3]*(q_154*(q_320 + q_4742 + q_4743) + q_319*(q_5096 + q_882*(q_4919 + (q_4745 + q_4760)*x[6]) + q_130*q_384*(x[6] + q_1420*q_2819) + q_153*q_2814*q_331) + q_343*(q_154 + q_145*q_4601 + q_1422*q_2819*q_840) + q_126*q_4573*q_669 + q_142*x[2]*(q_4917 - 16*q_334 + q_4609*(2*q_320 + q_290*x[7])) + q_376*q_867*(q_4605 + q_1195*q_4399)) + q_1052*q_508*q_5859) + q_1023*q_143*q_153*q_153*q_6841 + q_104*q_1427*q_153*q_2402*(q_1009*(q_343*(q_5480 + q_313*q_5513) + (q_346 + q_351)*q_6247 + x[5]*(4*(q_4930 + q_2719*q_4263) + x[6]*(q_78 + q_377*q_5540))) + (q_307 + q_346)*(q_1018*(q_279 + q_4762) + q_149*q_5864 + q_971*(q_1374*q_2819 + q_2814*q_911)) + q_383*(q_6836 + q_304*(q_1041*q_4440 + (q_143 + q_4943)*x[7]) + q_336*(q_47*q_4786 + q_115*q_1223*q_2819) + q_976*(q_71 + q_1330*q_2814) + x[5]*(x[2]*(q_4900 + (q_4726 + q_4736)*x[6]) + q_106*q_1223*q_2814)) - x[1]*(q_103*q_601 + q_124*q_601 + q_145*q_4801 + q_383*q_5011 + q_5016*q_85 + q_777*(q_351*(q_4589 + (q_4475 + q_4586)*x[6]) + q_5482*q_849 - x[5]*(q_351*(q_4578 + q_4592) + q_5483*x[6])) + q_137*q_323*x[3] + q_137*x[4]*(x[5]*(q_5481 + q_313*q_6251) + x[6]*(q_42 + (q_4383 + q_4609)*x[2]) + x[7]*(q_4728 + q_234*q_4471)) + q_1400*q_145*q_2810 + q_145*q_318*q_4418 + q_227*q_227*q_4653 + q_227*q_355*q_4726 + q_307*q_376*(q_4605 + q_336*(q_4609 + q_2814*q_326) + x[5]*(q_4587 + q_1214*q_2819)) +
        q_33*q_4589*q_611 + q_1323*q_227*q_2810*q_351 + q_1327*q_227*q_2814*q_58 + q_1327*q_2819*q_355*q_58) + x[3]*(q_5095 + q_142*q_6235 + q_971*(q_4727 + q_4789 + q_219*q_4580 + q_300*q_4582 + q_323*q_4565) + q_118*x[4]*(q_194*q_4574 + (q_4752 + q_74)*x[7]) + q_310*q_78*(q_854 + q_47*x[5])) + q_379*(q_4784 + q_6225)*q_832 + q_383*q_45*q_6793) + q_125*q_1941*q_1947*q_2402*(q_5520 + q_5861 + q_1009*(q_343*(q_4588 + q_4751 + q_4752) + q_6247*(q_1194 + q_967 + q_254*x[7]) + 4*x[5]*(q_4909 + q_4610*(q_616 + q_783) + x[6]*(a + (q_4590 + q_4610)*x[2]))) + q_1075*q_85 + q_151*q_669 - q_153*q_320 - q_153*q_343 + q_153*q_4742 + q_153*q_4743 + q_345*q_5051 + q_345*q_5052 - x[1]*(q_1046*(q_1613 + q_4758 + q_319*(x[6] + 2*q_5559*x[4]) + 2*q_334*q_5562) + q_254*(q_803*(q_4786 + q_4471*q_814 + x[6]*(a + q_367*q_5562)) + x[5]*((q_132 + q_6838)*x[7] + q_1463*q_2810*(q_775 + q_41*x[4])) + q_1333*q_2810*q_886) + q_383*(q_5015 + q_5514 + q_282*q_82 + q_319*(q_4923 + q_4810*(a + q_82))) + q_85*(q_5016 + q_334*q_81 + q_39*q_5864*x[5]) + q_971*(q_319*(q_4589 + (q_4383 + q_4590)*x[6]) + x[6]*(q_4753 + (q_4608 + q_4610)*x[6]) + q_243*(q_4418 + q_4604)*x[5])) + q_1052*q_305*(q_4809 + q_6225) + q_1081*q_1323*q_2810 + q_110*q_227*q_227 + q_110*q_320*q_383 + q_124*q_250*q_323 + q_126*q_4581*q_660 + q_130*q_227*q_310 + q_137*q_282*q_4685 + q_143*q_4559*q_940 + q_153*q_282*q_4383 + q_250*q_334*q_597 + q_310*q_4573*q_603 - q_310*q_4589*q_662 + q_314*q_335*q_4667 + q_338*q_383*q_597 + q_4653*q_85*q_886 + q_1013*q_1381*q_2810*q_345 + q_1327*q_227*q_2814*q_302 + q_1327*q_250*q_2810*q_361 + q_1327*q_250*q_2819*q_365 + q_1327*q_2810*q_307*q_552 + q_1346*q_2814*q_58*q_586 + q_1346*q_2819*q_320*q_584 + q_1350*q_2810*q_44*q_603 + q_1361*q_2814*q_314*q_752 + q_1361*q_2819*q_307*q_552 + q_1361*q_2819*q_555*q_85 + q_1366*q_2819*q_325*q_657 + q_1408*q_2819*q_314*q_686 + q_143*q_2810*q_363*q_926 + q_143*q_2814*q_331*q_611 + q_227*q_383*q_4581*q_70 + q_250*q_323*q_4572*q_73 + q_2810*q_325*q_369*q_996 + q_2819*q_323*q_368*q_383*q_70) + q_1937*q_1947*q_1947*q_1947*(q_1027*q_338 + q_1043*(q_4611 + q_71) + q_137*q_946 - q_4674*q_946 - q_4757*q_997 + x[2]*(q_146*q_6277 + q_985*(2*(q_353*q_4610 + q_4418*q_986 + q_4440*q_988) - q_6279*x[5]) + q_139*q_1433*q_2814) + x[5]*(q_358*q_4788 + q_4566*(q_992 + q_994) - q_4594*(q_994 + q_141*x[7]) + (q_4613 + q_76)*q_995) + q_138*q_325*q_4572 + q_329*q_364*q_4581 + q_333*q_4440*q_940 + q_340*(q_4809 + q_5563)*q_975 - q_1238*q_2810*q_332*q_358 + q_138*q_2819*q_323*q_368 + q_1419*q_2814*q_345*q_67) + q_1947*q_1947*q_1947*q_2372*(q_5520 + q_5861 - q_1057*q_4757 - q_1057*q_4758 + q_1074*q_85 + q_156*q_4757 + q_156*q_4758 - q_320*q_4953 + q_343*(q_4745*q_806 + q_85*(q_682 + a*(q_4767 + q_76)) - x[1]*(q_1046 + q_4929 + (q_1045 + q_152)*q_4610) + q_385*q_5521*q_60) + q_379*(q_5069 + q_1200*(q_253*q_4582 + q_5522*x[6]) + q_783*((q_4594 + q_4768)*x[7] + (q_4782 + q_5523)*x[6])) + x[5]*(q_1031*(q_2719*q_2816 + q_5523*x[6]) + q_1047*(q_365 + q_4924 + q_4925) + q_4471*(-q_1077 + (q_1196 + q_156)*x[4]) - q_4776*q_867 + x[1]*(q_371*((q_4944 + q_85)*x[7] + q_1417*q_2810*(q_1198 + q_314)) + q_383*(-(q_1425*q_2819) + q_2808*q_4289) + q_4573*q_980 + q_4588*q_894 + q_4810*(q_1047 + q_41*q_85) + q_116*q_1350*q_2819 + q_1351*q_2819*q_995) + x[2]*(q_152*q_5565 + q_118*x[3]*(x[7] + q_1211*q_4368) - q_1425*q_2814*q_383) + q_385*q_5565*q_728) + q_1031*(q_1601 - q_351)*q_5565 + q_110*q_325*q_85 + q_138*q_250*q_323 + q_142*q_363*q_4556 + q_143*q_320*q_383 - q_310*q_333*q_4667 + q_323*q_4572*q_662 + q_383*q_4727*q_656 + q_4581*q_660*q_77 + q_669*q_69*q_77 + q_1346*q_2819*q_325*q_649 + q_1408*q_2810*q_64*q_666 + q_1408*q_2819*q_314*q_852 - q_1427*q_2819*q_323*q_369) + q_1947*q_1947*q_1947*q_66*(q_1017*(-q_4801 + x[5]*(q_5552 + q_299*q_4418) + q_1222*q_2814*q_301) + q_151*q_946 + q_156*q_343 + q_305*q_5058 + q_371*(q_1081 + q_5071 + q_1009*(q_5557 + q_304*q_5565 - q_4554*x[5]) + q_77*q_872 + q_967*(q_4806 + x[7]*(q_138 + q_4944 + q_4596*q_64)) - x[1]*(q_5558 + q_333*(q_4946 + (a + q_6825)*x[6]) + x[5]*(q_4947 + (q_6838 + q_85)*x[7])) + q_303*q_376*q_4588 + q_4727*q_71*q_85 + q_1400*q_2814*q_71*q_85 + q_1406*q_2819*q_323*q_85 + q_1408*q_2814*q_310*q_64) + q_383*(q_137*q_345 + q_296*(x[6]*(q_4943 + q_85 + q_4418*q_923) + q_1221*q_4145*q_64) + (q_4941 + q_5555)*q_849 + q_131*x[4]*(q_5563 + q_294*q_4471) + q_1403*q_4134*q_64) + q_971*(q_319*(q_4940 + x[1]*(q_4810 + x[6]*(q_4383 + q_1211*q_2819))) + q_320*(q_69 + q_292*q_5560) + q_343*(q_78 + q_360*q_5553) - q_346*q_4589 + q_290*q_353*q_4440) + x[2]*(q_1009*(q_322*q_5565 + q_343*(q_4607 + q_4608) - 8*x[5]*(q_4810 + q_5562*x[6])) + q_149*q_6277 + q_5015*q_85 + q_135*x[4]*(x[1]*(q_4605 + q_5560*x[6]) - x[5]*(a + q_5561*x[1])) + q_137*x[1]*(q_1613 + 2*q_318)) + q_1031*q_303*q_4566 + q_1031*q_305*q_4559 + q_129*q_318*q_85 + q_130*q_305*q_353 + q_145*q_305*q_4591 + q_145*q_305*q_4598 + q_145*q_4440*q_821 - q_358*q_4559*q_953 - q_358*q_4589*q_953 + q_126*q_1446*q_2814*q_282 + q_1433*q_2814*q_813*q_85) + q_1947*q_1947*q_2088*q_2402*(q_1074 + q_1075 + q_344*(q_4779 + q_292*q_5565 + q_313*q_5565) + q_4742*q_85 + q_4743*q_85 + q_4777*q_650 + q_1433*q_2810*q_656 + q_1433*q_2814*q_850 + q_343*q_5857*q_76) + q_1947*q_1947*q_50*q_85*(q_1022*q_6841 + q_1036*(q_343*(q_6253 + q_255*q_4596) + (q_4775 + q_4783 + q_74)*q_847 - x[5]*(2*(M*(q_4779 + q_4930) + q_1202*q_2810*q_784) + x[6]*(q_85 + q_1202*q_4472 + q_367*(q_4777 + q_4778))) - q_1398*q_2819*(q_314 + q_81*x[4]) - q_1404*q_2810*(q_314 + 12*q_364)) + q_383*(q_1097 + q_296*(q_4810*(q_1079 + q_376*(q_384 + a*q_46) + q_806*q_82 + x[1]*(-q_971 + (q_47 + q_84)*q_85)) + x[6]*(q_156 + q_1031*q_7229 - q_379*q_4680 + q_4777*q_840 + q_882*(q_4795 + q_2784*q_2786) + x[1]*(q_1051 - q_6255*q_971 + q_119*q_1205*q_2819))) + q_343*(q_155 - q_1017*q_4471 + q_150*q_4601 + q_385*(q_117 + q_4601*q_53) + x[1]*(q_1050 + q_4929 + q_1204*q_2814*q_85) + q_1366*q_2814*q_806) + q_5067*q_78 + q_5068*q_78 + q_117*q_314*q_314 + q_118*x[4]*(q_146*q_5862 + q_307*q_75 + q_384*(q_4605 + q_4785 + q_4793) + q_385*(q_4784 + q_5533) + x[1]*(-2*(q_4786 + (q_4599 + q_5535)*x[6]) + 6*x[5]*(a + q_5559*x[2]))) + q_353*q_4652*q_722 + q_1366*q_2814*q_755*q_85 + q_1370*q_2814*q_762*q_85 + q_1377*q_2810*q_314*q_706 + q_1377*q_2819*q_314*q_722 + q_1381*q_2810*q_353*q_706 + q_1408*q_2814*q_314*q_851 + q_1408*q_2814*q_722*q_79 + q_345*q_60*(q_5542 + q_84)*q_85) + q_138*q_351*(q_1048 - q_1009*(q_4597 + q_5565) + q_132*q_307 + q_4663*q_684 + q_4717*q_779 + q_4778*q_977 + (q_138 + q_5539)*q_967 + x[1]*(M*(q_4930 - x[6]*(a + q_5561*x[2])) + x[5]*(q_129 + q_6251*q_975)) + q_1361*q_2819*q_376 + q_1408*q_2814*q_852) + q_371*q_383*(q_967*(-(q_387*q_4211) + (q_138 + q_5530)*x[7]) + x[7]*(q_1009*(q_4597 + q_4780 + q_4792) - x[1]*(M*(q_4946 + (q_4783 + q_5531)*x[6]) + x[5]*(q_4781 + a*q_257)) + x[2]*(q_977 + q_335*(q_44 + q_4783)))) + q_1422*q_1789*q_1836*q_1836*q_2814) - (q_1947*q_1947*q_2117*q_2402*(q_320 + q_343 + q_282*q_4604 + q_327*q_4598 + q_5488*x[7]))/256. + (q_1947*q_1947*q_1947*q_1947*(q_1200*q_6247 + q_343*q_5524 + x[5]*(q_339*q_5525 + (q_42 + q_4601 + q_4612)*x[6])))/256. + q_1036*q_1459*q_153*q_153*q_1895*(q_325*q_5485 - x[7]*(q_5020 + q_335*q_4571 + q_4471*q_603 + q_1361*q_2810*q_65 + q_1387*q_2810*q_305) + q_1836*q_5564*q_76) + q_114*q_1459*q_153*q_2210*q_742*(q_6854 + q_130*q_878 + q_135*q_821 + q_143*q_821 + q_143*q_872 + x[3]*(q_6801 + q_343*(a*(a + q_4767) + q_1168*q_2814*q_354) + q_348*(q_5019 + q_1238*q_2810*q_310) + x[5]*(q_5008 + x[1]*(q_4810*(q_41 + q_63) + q_1168*q_2819*q_356) + x[2]*(q_4899 + x[6]*(q_1238*q_2814 + q_1297*q_2819))) + x[7]*(q_5009 + (q_141 + q_5539)*x[7])) + q_118*x[4]*(q_1374*q_4145 + q_339*q_5857) + q_303*q_376*q_4573 + q_303*q_379*q_4611 + q_303*q_4573*q_728 + q_1361*q_2810*q_305*q_58 + q_1361*q_2810*q_307*q_64 + q_1389*q_2810*q_305*q_64 + q_1417*q_2810*q_345*q_85)));
	dx[1] = q_6783*(-(q_2315*(q_11356*x[7] - q_2315*(-(q_142*q_2420*(q_736 + q_1218*q_3432 + (q_4722 + q_69)*x[1])) + q_1939*q_2136*(a*(q_1347*q_2814 + q_4440*q_852) + q_379*q_5407) + q_1947*q_2025*q_3470 + q_2024*q_2402*q_3470 + q_2143*q_546*(q_4867 + q_4440*q_850 + q_4440*q_851) + q_1057*q_1422*q_2402*(q_736 + q_1142*q_4610 + q_4471*q_566 + q_5776*x[1]) + q_1057*q_1947*q_83*(q_4667*q_58 + q_4778*(q_138 + q_503) + q_5776*q_957 + q_1377*q_2819*q_384) + q_1280*q_1947*q_2402*((q_1145 + q_1569)*q_4610 + q_5521*x[1]) + q_1282*q_2123*q_2402*(q_1143*q_4610 + q_1237*q_2810*q_329) + q_1947*q_1947*q_50*(q_4891 + q_1423*q_3432 + q_4440*q_662 + q_5521*q_728) + q_2117*q_2195*q_2402*q_99 + q_1036*q_134*q_1459*q_153*q_2814 + q_1036*q_153*q_2195*q_64*q_85) + q_10330*q_2308*q_5570 - q_11374*q_1894*q_309*q_5570*q_6214)) - x[7]*(q_11356*q_2315 - q_5475*(q_1036*q_153*q_2423*(q_4887 - q_1363*q_2810 + q_1419*q_2810) + q_1057*q_2129*q_520*(q_367*(q_1013 + q_5002 + q_1386*q_2810*q_85) + q_373*(q_357*q_4720 + (q_130 + q_5512)*x[3] + q_1237*(q_1037 + q_149 + q_150)*q_2810) + q_376*q_4628 + (q_110 + q_383)*q_4867 - q_1346*q_2819*q_376) + q_1427*q_1895*q_2142*(q_1286*q_4745 - q_329*(q_5002 + (q_137 + q_5506)*x[3] + q_119*q_4440*(M + q_84)) + q_4993*q_79 + q_250*(q_369 + q_4717)*q_69) + q_1941*q_2068*q_2402*(q_234*(-(q_145*q_4574) + q_4745*q_658 + q_1596*q_2814*q_656) + x[1]*(q_5052 + q_5477 + q_4717*q_546)) + q_1947*q_2129*q_59*(q_360*(q_153 + q_5052 + (q_1047 + q_145 + q_151)*q_4766 + q_383*q_4888) + q_372*(q_153 + q_142*q_4572 + q_457*q_4618) + (q_1003 + q_106)*q_1423*q_2814*q_383 + q_1346*q_250*q_2819*q_60 + q_250*q_2810*q_315*q_376) + q_1036*q_119*q_153*q_153*q_4699 + q_1036*q_1459*q_153*q_2210*((M + q_4716)*q_750 + x[1]*(q_4888 + a*q_249) + q_1153*q_1422*q_2814) + q_1036*q_153*q_1947*q_83*(-q_4891 + q_377*(q_85 + q_4440*q_448) + q_4778*(q_143 + q_503) + x[1]*(q_4787 + q_211*q_4572 + q_255*q_84)) + q_1036*q_153*q_2074*q_85*(q_367*q_5485 + q_373*(q_85 + q_1202*q_253*q_2810) + q_1418*q_2814*q_383) + q_108*q_1947*q_1947*q_2358*(q_1159*q_4887 + q_4761*q_658 + x[1]*(-(q_1233*(q_1161 + q_184)*q_2810) + q_1346*q_2819*q_64) + q_1363*q_2194*q_2679) + q_119*q_1459*q_2402*q_742*(q_369*(q_1234*q_4607 + q_4471*q_738 + q_84*x[2]) + x[1]*(q_4998 + q_142*q_4440 + x[3]*(q_4920 + q_249*q_69))) + q_121*q_1947*q_1947*q_383*(a*(q_5003 + q_1387*q_2195*q_2679 + q_250*q_2810*q_387) + (q_1003 + q_4893 + q_5476)*q_957) + q_1224*q_1924*q_1947*q_1947*q_2402 + q_1937*q_1947*q_1947*q_1947*(q_736 + q_221*q_4594 + q_360*(a + q_4722)) + q_1947*q_1947*q_1947*q_2372*(q_371*(q_2810*q_771 + q_4471*q_649) + q_380*(q_85 + q_213*q_4766)) + q_1947*q_1947*q_1947*q_66*(q_1012*q_4587 + q_260*(q_4721 + q_85) + q_378*(q_4720 + q_85))) + q_12104*q_2308*q_5444 + q_12251*q_349*q_7705) - q_2308*q_5444*(q_12104*x[7] + q_1991*(q_5872*q_9766 + q_2038*q_3546*q_5869*q_6214 - q_2630*q_6214*q_8759*q_998 + q_1409*q_2402*q_5871*q_6214*q_67) + q_10330*q_2217*q_2315 + q_12270*q_2264*q_6214) + q_294*q_7705*(q_12251*x[7] + q_12270*x[6] + x[5]*(q_5872*(-(q_2667*q_7760) + q_1895*q_2071*q_7523 + q_2218*q_2616*q_5657 + q_3262*q_4263*q_6214) + q_11368*q_1947*q_851 + q_2038*q_3546*q_9764 - q_2630*q_9760*q_998) - q_11374*q_2630*q_933));
	dx[2] = q_6783*(-(q_2315*(q_10997*q_339 - q_2315*(q_150*q_2420*(q_7004 + (q_1132 + q_1151)*q_4609) + q_1947*q_2025*q_3578 + q_1947*q_2139*(q_376 + q_4849) + q_2024*q_2402*q_3578 + q_1036*q_134*q_153*q_3582 + q_1036*q_134*q_153*q_4663 + q_1057*q_1422*q_2402*(q_313*q_5261 + q_4609*(q_1142 + q_292*x[1])) + q_1057*q_1947*q_83*(q_4609*(q_1030 + q_149 + q_383*q_71) + q_777*(q_69 + 3*q_6266) + q_1377*q_2814*q_384) + q_1280*q_1947*q_2402*((q_1132 + q_1569)*q_4609 + q_5261*x[2]) + q_1282*q_2123*q_2402*(q_7004 + (q_1132 + q_1143)*q_4609) + q_1947*q_1947*q_50*(q_1411*q_4134 + q_4609*(q_1034 + q_1052 - q_145 + q_375*q_82)) + q_2117*q_2196*q_2402*q_99 + q_1036*q_153*q_2196*q_64*q_85) + q_11792*q_2264*q_5570 - q_2403*q_5570*q_894*(q_1057*q_2136*(q_1744*q_2819 + q_222*q_4574 + q_280*q_4612 + q_4418*q_738 + x[1]*(a + q_372*q_5540)) + q_108*q_2129*(-q_4976 + q_1748*q_2819 + x[1]*(q_7410 + q_4418*q_882) + q_114*q_1409*q_2819 + q_1151*q_328*q_4612) + q_153*q_2139*((q_1003 + q_1251)*q_4578 + q_312*q_4599 + q_372*(q_4579 + q_4702)) + q_2074*q_2432*((-7*q_4666)/2. + (q_42 + q_5982)*x[1] + (q_5390 + q_71)*x[2]) + q_2088*q_2402*q_3578 + q_1036*q_153*q_153*q_4418 + q_1057*q_1287*q_2402*(q_4862 + (q_39 + q_5548)*x[2] + (q_42 + q_5983)*x[1]) + q_108*q_1941*q_2402*(q_1161*x[2] - q_337*q_5547 + q_385*q_4760) + q_121*q_1947*q_1947*(q_4667 + q_4862 + q_1747*q_2819 + q_4418*q_566 + x[1]*(a + q_1362*q_2819)) + q_1929*q_1947*q_1947*(-q_4666 + q_4667 + q_1749*q_2819 + q_5523*x[1]) + q_11*q_1608*q_1947*q_2402*(q_5523 + q_1187*q_4472)))) - x[7]*(q_10997*q_2254 + q_5475*(q_1057*q_2129*q_520*(q_1037*(q_4568 + q_4773) + (q_1052 + q_1133 + q_147)*q_4708 + q_367*(q_4987 + (-q_1009 + q_145)*q_4440 - q_369*(q_6266 + q_84))) + q_1947*q_2089*q_2402*(x[2]*(q_5477 + q_430*q_4761) + q_383*(q_1163 + q_385)*q_4795) - q_1036*q_1459*q_153*q_2210*(q_4777*(q_1251 + q_503) + (-q_4674 + q_5273)*x[2] + q_1409*q_2819*q_79) + q_1036*q_153*q_1947*q_83*(q_4929 + (q_1029 + q_1052 + q_149)*q_4609 + q_372*(q_5372 + M*q_7234)) + q_104*q_1427*q_1895*q_2129*(q_4777*(q_1286 + q_1163*q_385) + x[2]*(q_7423 + q_4663*q_795) + q_1386*q_2819*q_384*q_85) + q_1098*q_128*q_1894*q_6008*q_742 + q_114*q_1459*q_2402*q_742*(-(q_1017*q_4440) + (q_4566 + q_4708)*q_971 + x[2]*(q_4998 + x[3]*(q_138 - q_379*q_5560) + q_1238*q_2197*q_2534) + (q_110 + q_1131)*q_4418*q_656) + q_121*q_1947*q_1947*q_383*((q_1056 + q_1134)*q_4697 + q_116*q_4693 + q_777*(q_682 + q_6266*q_71)) + q_1459*q_1947*q_2402*q_416*(q_384*(q_4566 + q_4675) - q_4440*q_840 + q_4708*(q_1159 - 6*q_385) + x[2]*(q_234*q_6266 + q_2534*q_2816)) + q_1919*q_1947*q_1947*q_1947*q_2372 + q_1939*q_1947*q_1947*q_59*((q_1030 + q_1034 + q_148)*q_4708 + q_372*((q_1031 + q_1134)*q_1237*q_2810 + q_329*q_5560*q_58) + q_384*(q_2810*q_934 + q_4471*q_584)) + q_1947*q_1947*q_1947*q_2372*(q_4988 + q_377*(q_4859 + q_85)) + (3*q_1939*q_1947*q_1947*q_1947*q_6008)/128. + q_1036*q_114*q_1427*q_153*q_153*q_2819 + q_1036*q_153*q_153*q_2196*q_383*q_67 + q_1947*q_1947*q_1947*q_381*q_66*(q_4676 - 2*q_2810*q_315)) + q_12269*q_2264*q_5444 + q_2403*q_5570*q_693*(q_104*q_1939*q_1947*(M*((q_1070 + q_1129)*q_4609 + q_329*q_381 + q_2518*q_2816*q_674) + x[2]*(q_153 + q_7423 + q_142*q_4613) - q_1409*q_142*q_2819) + q_1057*q_119*q_1947*(q_1009*(q_4675 + q_4728) - q_379*(q_4673 + q_5994) - (q_4998 + q_5265)*x[2] + q_1463*q_2810*q_840 + q_1596*q_2819*q_569) + q_1057*q_1287*q_2402*(q_385*(q_4670 - q_1411*q_2810) + q_957*(q_4853 + q_8001*x[3]) + x[2]*(q_4987 + (q_46 + q_4735)*q_741 + q_1406*q_2810*q_85)) + q_107*q_1947*q_1947*(-(q_1009*(q_4728 + q_1320*q_2819)) + q_379*(q_4673 + x[3]*(a + (q_4565 + q_4610)*x[2])) - q_4588*q_662 + (q_5002 + q_5265)*x[2] + q_1422*q_2810*q_840 + q_1533*q_2819*q_656) - q_1098*q_142*q_4418*q_742 - q_153*q_2123*q_742*(q_4891 + (q_1131 + q_143)*q_4777 + (q_5263 + q_5273)*x[2]) + q_1895*q_2078*q_2136*(q_7007*q_953 - x[2]*(q_1045 - q_1013*q_4440 + q_5281*q_77) + q_1419*q_2819*q_813) + q_1919*q_1947*q_1947*q_3129 + q_1924*q_1947*q_3540*q_882 + q_1939*q_1947*q_2068*(q_4981 + q_1417*q_3130 + q_379*q_5441 + (q_4855 + q_85)*x[2]) + q_1947*q_1947*q_7638*q_9 + q_2117*q_2402*q_50*(q_957*(q_4853 + x[3]*(q_5441 + q_1348*q_2819)) + x[2]*(-q_4854 + q_4668*q_85 + q_5441*q_680) + q_385*q_70*(q_4728 + q_1328*q_2819)) + (5*q_153*q_153*q_4357*q_657)/4. + q_145*q_1459*q_2210*q_742*(q_313*(q_184 + q_4440*q_466 + q_4471*q_852) + q_379*q_8000 + q_1321*q_2819*q_385))) - q_2264*q_5444*(q_12269*x[7] + q_2264*(q_11368*q_5076 + q_1947*q_8320*q_851 - q_2643*q_662*q_9760 + q_1947*q_2849*q_376*q_9764) + q_11792*q_2217*q_2315 + q_2403*q_693*(-(q_1942*q_8316) + q_11930*q_2217*q_680 + q_1942*q_2849*q_8742 + q_1397*q_2197*q_2545*q_5076)) + q_2403*q_5444*q_693*(q_1013*q_104*q_2129*(q_1009*(q_4836 + x[3]*(q_4930 + q_296*(q_6223 + q_69) - q_314*q_4475 + q_4418*q_637) - q_2819*q_330*q_383) + q_1037*(q_119*q_4558 + q_355*q_4722 + q_504*(x[5] + q_1420*q_2814)) - q_142*q_4836 + q_154*q_355 + q_379*(q_383*(q_258*q_6263 + q_4440*q_747) + x[3]*(q_384*(q_5552 + q_7227 + (q_4585 + q_5516)*x[6]) + q_8000*q_967 + x[2]*(q_729 + q_74*x[5]) + q_1266*q_2819*q_344) + q_1294*q_2819*q_611 - q_2819*q_85*q_864) + x[2]*(-(q_153*x[7]) + q_129*q_351*x[3] + q_142*x[3]*(q_4809 - 8*x[4] + q_240*q_4399) + q_369*q_383*(q_4591 + q_4662 + q_1195*q_2810*x[7])) + q_116*q_227*q_383 + q_132*q_355*q_383 + q_138*q_227*q_77 + q_376*q_5864*q_658 - q_379*q_4613*q_508 + q_1057*q_2819*q_330*q_45 - q_2819*q_330*q_369*q_742) + q_107*q_1947*q_1947*(q_1009*(q_4609*(-((q_1029 + q_145)*x[4]) - q_351*(q_383 + a*q_41)) + x[2]*(q_119*q_4605 + q_1443*q_3590) + x[5]*(q_383*(q_4735 + q_78) + q_85*(q_78 + (q_4610 + q_5516)*x[2]))) - q_1023*q_657 - q_1067*q_383 + q_153*q_837 + q_155*q_936 + q_379*(q_346*(q_383*(a - q_5983) + q_5547*q_85) + q_384*(-(q_4440*q_992) + (-q_4663 + q_4841)*x[6] + q_6251*q_977) + x[2]*(x[3]*(q_355*q_78 - (q_4563 + q_4610)*q_992 + q_1438*q_2814*q_357) + x[5]*(q_1034 + q_119*q_4579 + q_357*q_4618 + q_84*q_85)) - x[3]*(q_1152*q_361 + q_227*q_4609*(q_383 - 13*q_85))) + q_1048*q_4667*q_72 + q_118*q_250*q_602 + q_118*q_85*q_868 + q_129*q_250*q_992 - q_142*q_340*q_85 + q_153*q_4786*q_67 + q_351*q_4976*q_79 + q_355*q_742*q_85 + q_1036*q_1422*q_2819*q_351 + q_1048*q_1409*q_2819*q_72 + q_1346*q_2814*q_660*q_77 + q_1361*q_153*q_2814*q_67 + q_1389*q_3590*q_385*q_79 + q_1408*q_153*q_2819*q_67 + q_153*q_2819*q_330*q_680 + q_250*q_355*q_4667*q_79 + q_250*q_363*q_41*q_77 + q_310*q_4673*q_72*q_77 + 13*q_142*q_1427*q_2819*q_351 + q_1311*q_250*q_2819*q_355*q_77 + q_1321*q_227*q_250*q_2814*q_85 + q_1346*q_2819*q_310*q_60*q_85 + q_1346*q_2819*q_355*q_383*q_67 + q_1361*q_2814*q_384*q_72*q_77) + q_1098*q_1423*q_2210*(q_1037*q_6939 + q_728*(-q_4831 + q_2492*q_4263 + x[3]*(q_307*q_4467 + (q_42 + q_4737 + q_4769)*x[7])) + x[2]*(q_383*(q_4598*q_8 + q_4605*q_8 + x[5]*(q_4750 + q_1266*q_2814)) + q_4652*q_977 + x[3]*(q_120*x[7] + q_137*q_4556)) - q_1009*q_4418*(q_487 + q_796 + 9*q_307) + q_305*q_385*q_4652 + q_4418*q_980*(q_132 - 8*q_383) + q_1361*q_2819*q_384*q_58) + q_121*q_2117*q_2402*(q_1031*(q_4418*(q_1234*x[4] + q_351*q_39) + q_4786*q_72 + q_78*x[5]*(q_69 + (q_4564 + q_4604)*x[2])) + q_1083*(q_1335*q_2819 + q_1443*q_2814) + q_957*(-(a*(q_1021 + q_109*q_1220*q_2819 + q_1263*q_2819*q_383)) - q_714*(q_4810 + q_1432*q_2814 + x[5]*(q_4471 - (15*q_4418)/2.)) - x[2]*(q_296*(q_138 + q_383 + q_5476) + q_69*(q_365 + q_351*q_5233)) + x[4]*(q_7410 + q_85*(a + 2*q_4588))) - x[2]*(q_1034*(q_5230 + (q_4648 + q_4778)*x[5]) + q_145*(q_5230 + x[5]*(q_4778 + q_33*q_4418)) + q_383*q_5488*q_607 + q_75*q_77*x[3]*(x[7] + q_1435*q_2810)) + (q_1072 + q_1129)*q_2819*q_933 + q_137*q_305*q_4680 + q_384*q_81*(q_1152*x[6] + (q_4937 + q_5939)*q_69)) + q_1289*q_2123*q_2402*(q_1047*(-(q_1012*(q_322 + q_4762)) + q_4663*q_983 + q_114*q_1438*q_2814 + q_1438*q_2814*q_654) + q_302*(-q_6841 + q_1021*q_77 + q_1062*q_4418 + q_383*q_741*(7*x[7] + q_321*q_4368) + q_383*q_78*(q_5231 + x[5]*(q_4653 + q_1126*q_2196*q_2808))) + q_728*(q_1023*q_7007 + q_383*((-13*q_4837)/2. + q_384*(q_4810 + (q_247 + q_319)*q_4610) + (q_42 + q_5936)*q_967 + q_750*(q_289 + x[6])) + q_119*q_2492*q_2816 + q_351*q_383*q_8001) + q_1448*q_3590*q_832 + q_385*q_70*(q_383*(q_4907 + (-q_6260 + q_84)*x[5] + q_1223*q_2819*q_40) + q_4849*(q_346 + q_747) + q_128*q_1438*q_2819 + q_1438*q_2819*q_654) + q_4418*q_980*(q_153 - 26*q_1057 + 8*q_1036) + q_70*q_840*(q_355*q_4773 + q_119*q_1220*q_2819)) + q_1947*q_2129*q_94*(q_1089 + q_1009*(q_296*(q_69 + (q_4560 + q_4610)*x[2]) + q_4418*(q_677 + q_224*x[3]) + (q_4559 + q_4810)*x[2]) + q_1017*(q_4659 + q_5496) + q_1047*(q_344 + q_4940 + x[3]*(q_5232 + q_1443*q_2810)) + q_118*q_611 + q_124*q_936 + q_153*x[6] + q_379*(q_1022 - q_4837 + q_8723 + q_227*q_4676 + q_384*(q_5552 + (q_4560 + q_4561)*x[5] + x[6]*(q_4610 + q_1170*q_2819)) + x[2]*(-2*(q_365 + q_5560*q_965) + (-q_4579 + q_84)*x[5])) - x[2]*(q_1066 + q_1152*q_985 + q_142*q_5863 + q_997*(q_4589 + q_4659 + q_291*q_4475)) + q_150*q_2819*q_926 + q_305*q_4613*q_795 +
        q_351*q_383*q_4651) - (q_1947*q_1947*q_1947*(-q_1067 + q_1089 + q_1009*(q_4609*(q_616 + q_299*x[2] + q_46*x[4]) - q_5522*x[5]) + q_138*q_936 + q_156*x[6] + q_379*(q_1127 - q_4839 + q_346*(a + q_5233*x[2]) - x[2]*(q_958 + q_234*q_5234) + q_1324*q_2814*q_384 + q_1327*q_253*q_2819) - q_971*(q_4763 + q_253*q_4580) + x[2]*(-q_1023 + q_6835 - q_142*x[4] + q_383*(q_4598*q_64 + q_4605*q_61)) + q_351*q_383*q_4795 + q_1389*q_2819*q_385*q_64 + q_2819*q_330*q_680*q_85))/32. + q_114*q_153*q_1947*q_383*(q_1062 + q_1009*(q_4609*(q_487 + q_44*x[4]) + q_5236*x[2] + x[5]*(q_78 + (q_4552 + q_4585)*x[2])) + q_1017*(q_4749 + q_5236) + q_1023*q_4648 + q_116*q_611 + q_132*q_936 + q_351*q_4988 + q_379*(q_1127 + q_4839 + q_346*(a - q_5982) - q_384*(q_4605 + q_291*q_4418 + x[5]*(q_4555 + 5*q_4471)) + x[2]*(q_351*(q_4475 + q_4607) + (q_4729 + q_55)*x[5]) + q_1427*q_194*q_2819) + q_971*(q_4779 + q_75*x[5] + x[3]*(q_5232 + q_1322*q_2810)) - x[2]*(q_1066 + q_6835 + q_794*q_85 + q_997*(-q_4597 + q_4792 - (11*q_4605)/2.)) + q_1263*q_2819*q_379*q_385) + q_1302*q_153*q_1947*q_2380*(q_1031*(q_319*(q_69 + q_212*q_5562) + q_4418*(q_616 + q_75*x[4]) + (q_4785 + q_4791)*x[2]) + q_728*(q_1022 + q_346*(a + q_260*q_5560) + q_384*(q_4791 + (q_4565 + q_4585)*x[6] + x[5]*(q_4578 + q_1170*q_2814)) - q_4418*q_611 + x[2]*(q_729 + q_5252*q_965 + (q_4572 + q_55)*x[5]) + q_115*q_1220*q_2819) + x[2]*(q_124*(q_5230 + (q_4778 + q_4795)*x[5]) + q_383*(q_4899 + q_25*q_4598 + x[5]*(q_5229 + q_1297*q_2814)) + q_130*(q_224 + q_4755)*x[3]) + q_305*q_45*q_4680 + q_384*q_6*(q_365 - q_5939 + q_4418*q_983) + q_384*q_777*(q_1322*q_2814 + q_1437*q_2819) + q_2819*q_331*q_77*(q_113 - 6*q_383)) + q_153*q_153*q_1894*q_742*(x[3]*(q_309*(q_4702 + q_6263) + q_5506*x[6] + q_1333*q_2810*q_310) + x[7]*(q_4891 + (q_5263 + q_85)*x[2] + q_1238*q_1251*q_2819) + q_2819*q_369*q_926) + q_1924*q_1947*q_1947*q_1947*(q_309*(q_5281 + q_5567) + q_333*q_6089 + (q_132 + q_4920)*x[6]) + q_1941*q_1947*q_2402*q_59*(q_1037*(q_6939 + q_958) + q_957*(q_1127 + q_4831 + q_8723 - q_384*(q_4810 + q_1210*q_4402 + (q_4565 + q_4607)*x[6]) - x[2]*(q_958 + q_289*(a + q_4716) + q_351*(q_4564 + q_4607)) + q_1351*q_2819*q_344) + x[2]*(q_1003*(q_5230 + (q_4778 + q_5229)*x[5]) + q_85*(q_5230 + (q_4651 + q_4778)*x[5]) + q_137*x[3]*(q_4556 + x[7])) + q_1533*q_2819*q_980 + q_314*q_384*q_4736 + q_379*q_4552*q_832 + q_385*q_70*(q_4609*(q_637 - 7*q_351) - (q_4785 + q_4810)*x[2] + x[5]*(q_84 + (q_4555 + q_4561)*x[2]))) + q_1947*q_1947*q_1947*q_2372*(q_3130*q_933 + q_957*(q_5523*x[4] + q_1220*q_2819*q_62) + x[2]*(a*(q_5231 + (q_4652 + q_4653)*x[5]) + q_369*q_4556) - q_1009*q_2819*q_331) + q_1947*q_1947*q_2088*q_2402*(q_1447*q_2819 + q_313*q_5864) - (q_1947*q_1947*q_1947*q_1947*x[6])/128. + q_1036*q_142*q_1438*q_153*q_153*q_2819 - q_1036*q_145*q_1459*q_153*q_1895*((q_1198 + q_305)*q_4557 + x[2]*(q_5231 + (q_4653 + q_5229)*x[5]))));
	dx[3] = q_6783*(-(q_2315*(q_10118*x[5] + q_10516*q_336 + q_2315*(q_5039*q_5810 + q_2122*q_250*q_3389 + q_3097*q_448*q_7760) - q_11378*q_1939*q_333)) - q_351*(q_12250*x[5] - q_12253*x[6] + q_5475*(q_1057*q_2421*(q_153 + q_4953 + q_1056*q_5482 + q_4859*(q_106 + q_260*x[2]) + q_957*(q_4841 + q_5271*x[2])) + q_1057*q_1947*q_2086*(q_103*q_85 + q_1163*q_4776 + q_131*q_384 + q_131*q_385 + q_4618*q_466 + q_4717*q_504 + q_957*(q_1852*q_2814 + q_75*x[2])) + q_108*q_2117*q_2402*(q_153 + q_4618*q_649 + q_4859*(q_129 - 10*q_375 + q_377*x[2] + q_378*x[1]) + q_503*q_6822) + q_121*q_1947*q_2083*(q_1071*q_4440 + q_128*q_4717 + q_607*(q_132 + q_1490 + q_4471*q_652 + q_4596*q_62)) + q_1895*q_2078*q_2136*(q_1473*q_4983 + (q_106 + q_1490)*q_5002 + q_381*(q_1056 + q_379*(q_377 + q_1387*q_2814) + q_5512*q_71) + q_369*q_383*q_5153) + q_1947*q_1947*q_2129*q_2372 + q_1947*q_2078*q_2402*q_3129 + q_1947*q_2089*q_2402*(q_156 + q_383*(q_5530 + q_85) + (q_1249 + q_386)*q_4855) - (9*q_1013*q_1941*q_2402*q_3540)/128. + q_1036*q_153*q_2074*q_85*(q_1238*q_4134 + q_4440*q_447) + q_119*q_153*q_153*q_4618*q_742 + q_142*q_153*q_2403*q_742*(q_4622 + q_5153*x[3]) + q_153*q_1947*q_383*q_83*(q_1052*(a + q_4572) + q_135*q_384 + q_141*q_77 - q_145*q_4579 + q_447*q_4618 + q_2814*q_368*q_662 + q_82*x[1]*(q_4841 + q_367*q_5486)) + q_17*q_1939*q_1947*q_1947*(q_4854 + q_741*(q_5522 + q_1385*q_2814) + q_1237*q_2810*(q_148 + 16*q_1009 + q_30*q_375)) + q_1947*q_1947*q_1947*q_2372*(q_124 - q_4721)) - q_11378*q_1447*q_2210) - x[5]*(q_10118*q_2315 + q_12249*q_2308 + q_12250*q_351 + q_2264*(q_5932*q_9760 - q_1428*q_6463*q_8320 + q_2210*q_9764*q_998 + q_11368*q_250*q_67*q_6749)) - x[6]*(q_10516*q_2254 + q_12249*q_2264 - q_12253*q_351 + q_1991*(q_5932*q_8759 + q_2210*q_5869*q_998 - q_1428*q_6214*q_6463*q_9766 + q_1422*q_2402*q_5570*q_5871*q_658)));
}

//These are the functions passed to the numerical differential
//  equation solver. The first argument is unused. The second is 
//  the coordinates of a light ray. The third is set to the acceleration
//  vector of the light ray at that point. 
void DerivativesPastEddingtonFinkelstein(double t, double x[], double dx[]){
    static double *accel;
    static int i;
    static double norm;
    accel = &dx[4];
    dx[0] = x[4];
    dx[1] = x[5];
    dx[2] = x[6];
    dx[3] = x[7];
    PrimordialHole->AccelerationPastEddingtonFinkelstein(x, accel);

    if(abs(dx[1]) < .000001){
        for(i = 1; i < 8; i++) dx[i] /= dx[0];
        dx[0] = 1.0;
    } else {
        double a = PrimordialHole->rotation();
        double M = PrimordialHole->mass();
        norm = (dx[1]*(x[1]*x[1]) + a*a*dx[1] - 2*M*dx[1]*x[1])/(dx[1]*(dx[0]*(x[1]*x[1]) + dx[1]*(x[1]*x[1]) + a*a*dx[0] + a*a*dx[1] - 2*M*dx[0]*x[1]));
        for(i=0;i<8;i++) dx[i] /= norm;
    }
}

void DerivativesFutureEddingtonFinkelstein(double t, double x[], double dx[]){
    static double *accel;
    static int i;
    static double norm;
    accel = &dx[4];
    dx[0] = x[4];
    dx[1] = x[5];
    dx[2] = x[6];
    dx[3] = x[7];

    PrimordialHole->AccelerationFutureEddingtonFinkelstein(x, accel);
    if(abs(dx[1]) < .000001){
        for(i = 1; i < 8; i++) dx[i] /= dx[0];
        dx[0] = 1.0;
    } else {
        double a = PrimordialHole->rotation();
        double M = PrimordialHole->mass();
        norm = (dx[1]*(x[1]*x[1]) + a*a*dx[1] - 2*M*dx[1]*x[1])/(dx[1]*(dx[0]*(x[1]*x[1]) + dx[1]*(x[1]*x[1]) + a*a*dx[0] + a*a*dx[1] - 2*M*dx[0]*x[1]));
        for(i=0;i<8;i++) dx[i] /= norm;
    }
}

void DerivativesCartesian(double t, double x[], double dx[]){
    static double *a;
    static int i;
    a = &dx[4];
    dx[0] = x[4];
    dx[1] = x[5];
    dx[2] = x[6];
    dx[3] = x[7];
    PrimordialHole->AccelerationCartesian(x, a);
    for(i = 1; i<8; i++) dx[i] /= dx[0];
    dx[0] = 1.0;
}

//The distance from the black hole in various kinds of coordinates.
double DistancePastEddingtonFinkelstein(double x[]){
    return x[1]*x[1];
}

double DistanceFutureEddingtonFinkelstein(double x[]){
    return x[1]*x[1];
}

double DistanceCartesian(double x[]){
    return x[1]*x[1] + x[2]*x[2] + x[3]*x[3];
}

int CoordinateTest(int coord, double *prev, double *next){
    switch(coord){
        case PAST_EF:
            if (next[1]*next[1] < 6400) return PAST_EF;
            else return CARTESIAN_POSITIVE_R;
        case CARTESIAN_POSITIVE_R:
            if (next[1]*next[1] + next[2]*next[2] + next[3]*next[3] < 2500) return PAST_EF;
            else return CARTESIAN_POSITIVE_R;
        default:
            return PAST_EF;
    }
}

int CoordinateTest(int coord, double *prev) {
    switch(coord){
        case PAST_EF:
            if (prev[1]*prev[1] < 6400) return PAST_EF;
            else return CARTESIAN_POSITIVE_R;
        case CARTESIAN_POSITIVE_R:
            if (prev[1]*prev[1] + prev[2]*prev[2] + prev[3]*prev[3] < 2500) return PAST_EF;
            else return CARTESIAN_POSITIVE_R;
        default:
            return PAST_EF;
    }
}

void CoordinateSwitch(BlackHole *blackhole, double lambda2[], double v[], int n, int newcoordinate, int presentcoordinate){
    static int i;
    switch (newcoordinate){
        case PAST_EF:
            if(presentcoordinate == CARTESIAN_POSITIVE_R){
                for(i = 0; i < n; i++)
                    CartesianToRadialCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), 1);
                CartesianToRadialCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), 1);

                for(i = 0; i < n; i++)
                    EddingtonFinkelsteinCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), -1);
                EddingtonFinkelsteinCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), -1);

            } else if(presentcoordinate == CARTESIAN_NEGATIVE_R) {
                for(i = 0; i < n; i++)
                    CartesianToRadialCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), -1);
                CartesianToRadialCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), -1);
                for(i = 0; i < n; i++)
                    EddingtonFinkelsteinCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), -1);
                EddingtonFinkelsteinCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), -1);
                blackhole->reverseMass();
            } else if(presentcoordinate == RADIAL) {
                for(i = 0; i < n; i++)
                    EddingtonFinkelsteinCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), -1);
                EddingtonFinkelsteinCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), -1);
            } else {
                //TODO: Generate error.
            }
            break;

        case FUTURE_EF:
            if(presentcoordinate == PAST_EF) {
                for(i = 0; i < n; i++)
                    EddingtonFinkelsteinCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), 2);
                EddingtonFinkelsteinCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), 2);
            } else if(presentcoordinate == RADIAL) {
                for(i = 0; i < n; i++)
                    EddingtonFinkelsteinCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), 1);
                EddingtonFinkelsteinCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), 1);
            } else {
                //TODO: Generate error.
            }
            break;

        case CARTESIAN_POSITIVE_R:
            if(presentcoordinate == PAST_EF) {
                for(i = 0; i < n; i++)
                    EddingtonFinkelsteinCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), 1);
                EddingtonFinkelsteinCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), 1);
                for(i = 0; i < n; i++)
                    RadialToCartesianCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation());
                RadialToCartesianCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation());
            } else if(presentcoordinate == FUTURE_EF) {
                for(i = 0; i < n; i++)
                    EddingtonFinkelsteinCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), -1);
                EddingtonFinkelsteinCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), 2);
                for(i = 0; i < n; i++)
                    RadialToCartesianCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation());
                RadialToCartesianCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation());
            } else if(presentcoordinate == CARTESIAN_NEGATIVE_R) {
                blackhole->reverseMass();
            } else if(presentcoordinate == RADIAL) {
                for(i = 0; i < n; i++)
                    RadialToCartesianCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation());
                RadialToCartesianCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation());
            } else {
                //TODO: Generate error.
            }
            break;

        case CARTESIAN_NEGATIVE_R:
            if(presentcoordinate == PAST_EF) {
                for(i = 0; i < n; i++)
                    EddingtonFinkelsteinCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), 1);
                EddingtonFinkelsteinCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), 1);
                for(i = 0; i < n; i++)
                    RadialToCartesianCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation());
                RadialToCartesianCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation());
                blackhole->reverseMass();
            } else if(presentcoordinate == CARTESIAN_POSITIVE_R) {
                blackhole->reverseMass();
            } else if(presentcoordinate == RADIAL) {
                for(i = 0; i < n; i++)
                    RadialToCartesianCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation());
                RadialToCartesianCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation());
            } else {
                //TODO: Generate error.
            }
            break;

        case RADIAL:
            if(presentcoordinate == PAST_EF){
                for(i = 0; i < n; i++)
                    EddingtonFinkelsteinCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), 1);
                EddingtonFinkelsteinCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), 1);
            } else if(presentcoordinate == FUTURE_EF){
                for(i = 0; i < n; i++)
                    EddingtonFinkelsteinCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), -1);
                EddingtonFinkelsteinCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), -1);
            } else if(presentcoordinate == CARTESIAN_POSITIVE_R){
                for(i = 0; i < n; i++)
                    CartesianToRadialCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), -1);
                CartesianToRadialCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), -1);
            } else if(presentcoordinate == CARTESIAN_NEGATIVE_R){
                for(i = 0; i < n; i++)
                    CartesianToRadialCoordinateTransformation(&v[4*i], lambda2, blackhole->mass(), blackhole->rotation(), -1);
                CartesianToRadialCoordinateConversion(lambda2, blackhole->mass(), blackhole->rotation(), -1);
            } else {
                //TODO: Generate error.
            }
    }
}
